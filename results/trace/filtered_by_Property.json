[
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/no-columns/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/no-columns/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/no-columns/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/no-columns/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/no-columns/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/no-columns/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/index-map/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/index-map/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/index-map/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/index-map/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/index-map/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/index-map/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/index-map/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/index-map/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/index-map/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/index-map/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/index-map/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/react-sources-extended/index-map/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/index-map/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/index-map/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/index-map/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/index-map/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/index-map/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/inline/fb-sources-extended/index-map/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/index-map/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/index-map/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/index-map/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/index-map/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/index-map/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/index-map/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/index-map/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/index-map/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/index-map/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/index-map/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/index-map/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/react-sources-extended/index-map/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/index-map/ContainingStringSourceMappingURL.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/index-map/ToDoList.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/index-map/index.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/index-map/ComponentUsingHooksIndirectly.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/index-map/ComponentWithCustomHook.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/__tests__/__source__/__compiled__/external/fb-sources-extended/index-map/Example.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/flight/scripts/build.js",
    "commits": [
      {
        "commit": "0512cd6a261eb738059aac4769ea31e66aab2065",
        "message": "Bump fixture dependency versions (#20397)\n\n* Bump all versions\r\n\r\n* Switch to CJS mode\r\n\r\n* Revert \"Switch to CJS mode\"\r\n\r\nThis reverts commit b3c4fd92dcef6ecb4116fc66f674ae88aad3c582.\r\n\r\n* Fix ES mode\r\n\r\n* Add nodemon to restart the server on edits\r\n\r\n* Ignore /server/ from compilation",
        "diff": [
          {
            "removed": "",
            "added": "if (Object.prototype.hasOwnProperty.call(err, 'postcssNode')) {"
          }
        ]
      }
    ]
  },
  {
    "file": "scripts/devtools/prepare-release.js",
    "commits": [
      {
        "commit": "b9964684bd8c909fc3d88f1cd47aa1f45ea7ba32",
        "message": "DevTools release script updates: (#22170)",
        "diff": [
          {
            "removed": "",
            "added": "    if (json.hasOwnProperty('version_name')) {"
          }
        ]
      }
    ]
  },
  {
    "file": "scripts/jest/devtools/setupEnv.js",
    "commits": [
      {
        "commit": "4c03bb6ed01a448185d9a1554229208a9480560d",
        "message": "[DevTools] ignore tests without reactVersion pragma if REACT_VERSION specified (#24555)\n\nIn DevTools tests, if the REACT_VERSION specified, we know this is a regression test (testing older React Versions). Because a lot of tests test the DevTools front end and we don't want to run them in the regression test scenario, we decided to only run tests that have the // @reactVersion pragma defined.\r\n\r\nBecause if there are no tests specified, jest will fail, we also opt to use jest.skip to skip all the tests that we don't want to run for a specific React version istead.\r\n\r\nThis PR makes this change.",
        "diff": [
          {
            "removed": "",
            "added": "if (!global.hasOwnProperty('localStorage')) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-native-renderer/src/ReactFiberConfigFabric.js",
    "commits": [
      {
        "commit": "b55d31955982851284bb437a5187a6c56e366539",
        "message": "Rename HostConfig files to FiberConfig to clarify they are configs fo… (#26592)\n\npart of https://github.com/facebook/react/pull/26571\r\n\r\nmerging separately to improve tracking of files renames in git\r\n\r\nRename HostConfig files to FiberConfig to clarify they are configs for\r\nFiber and not Fizz/Flight. This better conforms to the naming used in\r\nFlight and now Fizz of `ReactFlightServerConfig` and `ReactFizzConfig`",
        "diff": [
          {
            "removed": "",
            "added": "      if (props.hasOwnProperty(key)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-native-renderer/src/ReactFiberConfigNative.js",
    "commits": [
      {
        "commit": "b55d31955982851284bb437a5187a6c56e366539",
        "message": "Rename HostConfig files to FiberConfig to clarify they are configs fo… (#26592)\n\npart of https://github.com/facebook/react/pull/26571\r\n\r\nmerging separately to improve tracking of files renames in git\r\n\r\nRename HostConfig files to FiberConfig to clarify they are configs for\r\nFiber and not Fizz/Flight. This better conforms to the naming used in\r\nFlight and now Fizz of `ReactFlightServerConfig` and `ReactFizzConfig`",
        "diff": [
          {
            "removed": "",
            "added": "      if (props.hasOwnProperty(key)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-native-renderer/src/legacy-events/SyntheticEvent.js",
    "commits": [
      {
        "commit": "e3f4eb7272d4ca0ee49f27577156b57eeb07cf73",
        "message": "Fork legacy-events folder into react-dom and react-native (#19228)",
        "diff": [
          {
            "removed": "",
            "added": "    if (!Interface.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-native-renderer/src/legacy-events/EventPluginRegistry.js",
    "commits": [
      {
        "commit": "e3f4eb7272d4ca0ee49f27577156b57eeb07cf73",
        "message": "Fork legacy-events folder into react-dom and react-native (#19228)",
        "diff": [
          {
            "removed": "",
            "added": "    !eventNameDispatchConfigs.hasOwnProperty(eventName),"
          },
          {
            "removed": "",
            "added": "      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {"
          },
          {
            "removed": "",
            "added": "    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {"
          },
          {
            "removed": "",
            "added": "      !namesToPlugins.hasOwnProperty(pluginName) ||"
          }
        ]
      },
      {
        "commit": "a724a3b578dce77d427bef313102a4d0e978d9b4",
        "message": "[RFC] Codemod invariant -> throw new Error (#22435)\n\n* Hoist error codes import to module scope\r\n\r\nWhen this code was written, the error codes map (`codes.json`) was\r\ncreated on-the-fly, so we had to lazily require from inside the visitor.\r\n\r\nBecause `codes.json` is now checked into source, we can import it a\r\nsingle time in module scope.\r\n\r\n* Minify error constructors in production\r\n\r\nWe use a script to minify our error messages in production. Each message\r\nis assigned an error code, defined in `scripts/error-codes/codes.json`.\r\nThen our build script replaces the messages with a link to our\r\nerror decoder page, e.g. https://reactjs.org/docs/error-decoder.html/?invariant=92\r\n\r\nThis enables us to write helpful error messages without increasing the\r\nbundle size.\r\n\r\nRight now, the script only works for `invariant` calls. It does not work\r\nif you throw an Error object. This is an old Facebookism that we don't\r\nreally need, other than the fact that our error minification script\r\nrelies on it.\r\n\r\nSo, I've updated the script to minify error constructors, too:\r\n\r\nInput:\r\n  Error(`A ${adj} message that contains ${noun}`);\r\nOutput:\r\n  Error(formatProdErrorMessage(ERR_CODE, adj, noun));\r\n\r\nIt only works for constructors that are literally named Error, though we\r\ncould add support for other names, too.\r\n\r\nAs a next step, I will add a lint rule to enforce that errors written\r\nthis way must have a corresponding error code.\r\n\r\n* Minify \"no fallback UI specified\" error in prod\r\n\r\nThis error message wasn't being minified because it doesn't use\r\ninvariant. The reason it didn't use invariant is because this particular\r\nerror is created without begin thrown — it doesn't need to be thrown\r\nbecause it's located inside the error handling part of the runtime.\r\n\r\nNow that the error minification script supports Error constructors, we\r\ncan minify it by assigning it a production error code in\r\n`scripts/error-codes/codes.json`.\r\n\r\nTo support the use of Error constructors more generally, I will add a\r\nlint rule that enforces each message has a corresponding error code.\r\n\r\n* Lint rule to detect unminified errors\r\n\r\nAdds a lint rule that detects when an Error constructor is used without\r\na corresponding production error code.\r\n\r\nWe already have this for `invariant`, but not for regular errors, i.e.\r\n`throw new Error(msg)`. There's also nothing that enforces the use of\r\n`invariant` besides convention.\r\n\r\nThere are some packages where we don't care to minify errors. These are\r\npackages that run in environments where bundle size is not a concern,\r\nlike react-pg. I added an override in the ESLint config to ignore these.\r\n\r\n* Temporarily add invariant codemod script\r\n\r\nI'm adding this codemod to the repo temporarily, but I'll revert it\r\nin the same PR. That way we don't have to check it in but it's still\r\naccessible (via the PR) if we need it later.\r\n\r\n* [Automated] Codemod invariant -> Error\r\n\r\nThis commit contains only automated changes:\r\n\r\nnpx jscodeshift -t scripts/codemod-invariant.js packages --ignore-pattern=\"node_modules/**/*\"\r\nyarn linc --fix\r\nyarn prettier\r\n\r\nI will do any manual touch ups in separate commits so they're easier\r\nto review.\r\n\r\n* Remove temporary codemod script\r\n\r\nThis reverts the codemod script and ESLint config I added temporarily\r\nin order to perform the invariant codemod.\r\n\r\n* Manual touch ups\r\n\r\nA few manual changes I made after the codemod ran.\r\n\r\n* Enable error code transform per package\r\n\r\nCurrently we're not consistent about which packages should have their\r\nerrors minified in production and which ones should.\r\n\r\nThis adds a field to the bundle configuration to control whether to\r\napply the transform. We should decide what the criteria is going\r\nforward. I think it's probably a good idea to minify any package that\r\ngets sent over the network. So yes to modules that run in the browser,\r\nand no to modules that run on the server and during development only.",
        "diff": [
          {
            "removed": "!eventNameDispatchConfigs.hasOwnProperty(eventName),",
            "added": ""
          },
          {
            "removed": ");",
            "added": "if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-debug-tools/src/ReactDebugHooks.js",
    "commits": [
      {
        "commit": "0415b18a100043df164bcd40639f9373e3358350",
        "message": "[ReactDebugTools] add custom error type for future new hooks (#24168)\n\n* [ReactDebugTools] add custom error type for future new hooks\r\n\r\n* update per review comments\r\n\r\n* remove unused argument",
        "diff": [
          {
            "removed": "",
            "added": "if (target.hasOwnProperty(prop)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-art/src/__tests__/ReactART-test.js",
    "commits": [
      {
        "commit": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
        "message": "Use Yarn Workspaces (#11252)\n\n* Enable Yarn workspaces for packages/*\r\n\r\n* Move src/isomorphic/* into packages/react/src/*\r\n\r\n* Create index.js stubs for all packages in packages/*\r\n\r\nThis makes the test pass again, but breaks the build because npm/ folders aren't used yet.\r\nI'm not sure if we'll keep this structure--I'll just keep working and fix the build after it settles down.\r\n\r\n* Put FB entry point for react-dom into packages/*\r\n\r\n* Move src/renderers/testing/* into packages/react-test-renderer/src/*\r\n\r\nNote that this is currently broken because Jest ignores node_modules,\r\nand so Yarn linking makes Jest skip React source when transforming.\r\n\r\n* Remove src/node_modules\r\n\r\nIt is now unnecessary. Some tests fail though.\r\n\r\n* Add a hacky workaround for Jest/Workspaces issue\r\n\r\nJest sees node_modules and thinks it's third party code.\r\n\r\nThis is a hacky way to teach Jest to still transform anything in node_modules/react*\r\nif it resolves outside of node_modules (such as to our packages/*) folder.\r\n\r\nI'm not very happy with this and we should revisit.\r\n\r\n* Add a fake react-native package\r\n\r\n* Move src/renderers/art/* into packages/react-art/src/*\r\n\r\n* Move src/renderers/noop/* into packages/react-noop-renderer/src/*\r\n\r\n* Move src/renderers/dom/* into packages/react-dom/src/*\r\n\r\n* Move src/renderers/shared/fiber/* into packages/react-reconciler/src/*\r\n\r\n* Move DOM/reconciler tests I previously forgot to move\r\n\r\n* Move src/renderers/native-*/* into packages/react-native-*/src/*\r\n\r\n* Move shared code into packages/shared\r\n\r\nIt's not super clear how to organize this properly yet.\r\n\r\n* Add back files that somehow got lost\r\n\r\n* Fix the build\r\n\r\n* Prettier\r\n\r\n* Add missing license headers\r\n\r\n* Fix an issue that caused mocks to get included into build\r\n\r\n* Update other references to src/\r\n\r\n* Re-run Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix weird Flow violation\r\n\r\nI didn't change this file but Flow started complaining.\r\nCaleb said this annotation was unnecessarily using $Abstract though so I removed it.\r\n\r\n* Update sizes\r\n\r\n* Fix stats script\r\n\r\n* Fix packaging fixtures\r\n\r\nUse file: instead of NODE_PATH since NODE_PATH.\r\nNODE_PATH trick only worked because we had no react/react-dom in root node_modules, but now we do.\r\n\r\nfile: dependency only works as I expect in Yarn, so I moved the packaging fixtures to use Yarn and committed lockfiles.\r\nVerified that the page shows up.\r\n\r\n* Fix art fixture\r\n\r\n* Fix reconciler fixture\r\n\r\n* Fix SSR fixture\r\n\r\n* Rename native packages",
        "diff": [
          {
            "removed": "",
            "added": "    if (!expectedStructure.hasOwnProperty(prop)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-test-renderer/src/__tests__/ReactTestRendererTraversal-test.js",
    "commits": [
      {
        "commit": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
        "message": "Use Yarn Workspaces (#11252)\n\n* Enable Yarn workspaces for packages/*\r\n\r\n* Move src/isomorphic/* into packages/react/src/*\r\n\r\n* Create index.js stubs for all packages in packages/*\r\n\r\nThis makes the test pass again, but breaks the build because npm/ folders aren't used yet.\r\nI'm not sure if we'll keep this structure--I'll just keep working and fix the build after it settles down.\r\n\r\n* Put FB entry point for react-dom into packages/*\r\n\r\n* Move src/renderers/testing/* into packages/react-test-renderer/src/*\r\n\r\nNote that this is currently broken because Jest ignores node_modules,\r\nand so Yarn linking makes Jest skip React source when transforming.\r\n\r\n* Remove src/node_modules\r\n\r\nIt is now unnecessary. Some tests fail though.\r\n\r\n* Add a hacky workaround for Jest/Workspaces issue\r\n\r\nJest sees node_modules and thinks it's third party code.\r\n\r\nThis is a hacky way to teach Jest to still transform anything in node_modules/react*\r\nif it resolves outside of node_modules (such as to our packages/*) folder.\r\n\r\nI'm not very happy with this and we should revisit.\r\n\r\n* Add a fake react-native package\r\n\r\n* Move src/renderers/art/* into packages/react-art/src/*\r\n\r\n* Move src/renderers/noop/* into packages/react-noop-renderer/src/*\r\n\r\n* Move src/renderers/dom/* into packages/react-dom/src/*\r\n\r\n* Move src/renderers/shared/fiber/* into packages/react-reconciler/src/*\r\n\r\n* Move DOM/reconciler tests I previously forgot to move\r\n\r\n* Move src/renderers/native-*/* into packages/react-native-*/src/*\r\n\r\n* Move shared code into packages/shared\r\n\r\nIt's not super clear how to organize this properly yet.\r\n\r\n* Add back files that somehow got lost\r\n\r\n* Fix the build\r\n\r\n* Prettier\r\n\r\n* Add missing license headers\r\n\r\n* Fix an issue that caused mocks to get included into build\r\n\r\n* Update other references to src/\r\n\r\n* Re-run Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix weird Flow violation\r\n\r\nI didn't change this file but Flow started complaining.\r\nCaleb said this annotation was unnecessarily using $Abstract though so I removed it.\r\n\r\n* Update sizes\r\n\r\n* Fix stats script\r\n\r\n* Fix packaging fixtures\r\n\r\nUse file: instead of NODE_PATH since NODE_PATH.\r\nNODE_PATH trick only worked because we had no react/react-dom in root node_modules, but now we do.\r\n\r\nfile: dependency only works as I expect in Yarn, so I moved the packaging fixtures to use Yarn and committed lockfiles.\r\nVerified that the page shows up.\r\n\r\n* Fix art fixture\r\n\r\n* Fix reconciler fixture\r\n\r\n* Fix SSR fixture\r\n\r\n* Rename native packages",
        "diff": [
          {
            "removed": "",
            "added": "    const hasFooProp = node => node.props.hasOwnProperty('foo');"
          },
          {
            "removed": "",
            "added": "    const hasFooProp = node => node.props.hasOwnProperty('foo');"
          },
          {
            "removed": "",
            "added": "    const hasBarProp = node => node.props.hasOwnProperty('bar');"
          },
          {
            "removed": "",
            "added": "    const hasBazProp = node => node.props.hasOwnProperty('baz');"
          },
          {
            "removed": "",
            "added": "    const hasBingProp = node => node.props.hasOwnProperty('bing');"
          },
          {
            "removed": "",
            "added": "    const hasNullProp = node => node.props.hasOwnProperty('null');"
          },
          {
            "removed": "",
            "added": "    const hasVoidProp = node => node.props.hasOwnProperty('void');"
          },
          {
            "removed": "",
            "added": "    const hasItselfProp = node => node.props.hasOwnProperty('itself');"
          }
        ]
      },
      {
        "commit": "7dc1a176b5c50739b200a9d8612a42b110289d22",
        "message": "Skip special nodes when reading TestInstance.parent (#12813)",
        "diff": [
          {
            "removed": "",
            "added": "const hasNestedProp = node => node.props.hasOwnProperty('nested');"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.internal.js",
    "commits": [
      {
        "commit": "94518b068bf52196abea0c83f4c9926bfe2065c6",
        "message": "Add stack unwinding phase for handling errors (#12201)\n\n* Add stack unwinding phase for handling errors\r\n\r\nA rewrite of error handling, with semantics that more closely match\r\nstack unwinding.\r\n\r\nErrors that are thrown during the render phase unwind to the nearest\r\nerror boundary, like before. But rather than synchronously unmount the\r\nchildren before retrying, we restart the failed subtree within the same\r\nrender phase. The failed children are still unmounted (as if all their\r\nkeys changed) but without an extra commit.\r\n\r\nCommit phase errors are different. They work by scheduling an error on\r\nthe update queue of the error boundary. When we enter the render phase,\r\nthe error is popped off the queue. The rest of the algorithm is\r\nthe same.\r\n\r\nThis approach is designed to work for throwing non-errors, too, though\r\nthat feature is not implemented yet.\r\n\r\n* Add experimental getDerivedStateFromCatch lifecycle\r\n\r\nFires during the render phase, so you can recover from an error within the same\r\npass. This aligns error boundaries more closely with try-catch semantics.\r\n\r\nLet's keep this behind a feature flag until a future release. For now, the\r\nrecommendation is to keep using componentDidCatch. Eventually, the advice will\r\nbe to use getDerivedStateFromCatch for handling errors and componentDidCatch\r\nonly for logging.\r\n\r\n* Reconcile twice to remount failed children, instead of using a boolean\r\n\r\n* Handle effect immediately after its thrown\r\n\r\nThis way we don't have to store the thrown values on the effect list.\r\n\r\n* ReactFiberIncompleteWork -> ReactFiberUnwindWork\r\n\r\n* Remove startTime\r\n\r\n* Remove TypeOfException\r\n\r\nWe don't need it yet. We'll reconsider once we add another exception type.\r\n\r\n* Move replay to outer catch block\r\n\r\nThis moves it out of the hot path.",
        "diff": [
          {
            "removed": "",
            "added": "      if (object.hasOwnProperty(key)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom/src/shared/ReactDOMFloat.js",
    "commits": [
      {
        "commit": "bbc8530ed7a67859583a7c990ac51cd39c7746e5",
        "message": "[Float] Refactor public interface and internal HostDispatcher implementation (#27361)\n\nWhen Float was first developed the internal implementation and external\r\ninterface were the same. This is problematic for a few reasons. One, the\r\npublic interface is typed but it is also untrusted and we should not\r\nassume that it is actually respected. Two, the internal implementations\r\ncan get called from places other than the the public interface and\r\nhaving to construct an options argument that ends up being destructured\r\nto process the request is computationally wasteful and may limit JIT\r\noptimizations to some degree. Lastly, the wire format was not as\r\ncompressed as it could be and it was untyped.\r\n\r\nThis refactor aims to address that by separating the public interface\r\nfrom the internal implementations so we can solve these challenges and\r\nalso make it easier to change Float in the future\r\n\r\n* The internal dispatcher method preinit is now preinitStyle and\r\npreinitScript.\r\n* The internal dispatcher method preinitModule is now\r\npreinitModuleScript in anticipation of different implementations for\r\nother module types in the future.\r\n* The wire format is explicitly typed and only includes options if they\r\nare actually used omitting undefined and nulls.\r\n* Some function arguments are not options even if they are optional. For\r\ninstance precedence can be null/undefined because we deafult it to\r\n'default' however we don't cosnider this an option because it is not\r\nsomething we transparently apply as props to the underlying instance.\r\n* Fixes a problem with keying images in flight where srcset and sizes\r\nwere not being taken into account.\r\n* Moves argument validation into the ReactDOMFloat file where it is\r\nshared with all runtimes that expose these methods\r\n* Fixes crossOrigin serialization to use empty string except when\r\n'use-credentials'",
        "diff": [
          {
            "removed": "",
            "added": "options.hasOwnProperty('crossOrigin')"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom/src/__tests__/ReactServerRendering-test.js",
    "commits": [
      {
        "commit": "f762b3abb1d951b366f3c8a2354aeedb7fbc32ff",
        "message": "Run react-dom SSR import test in jsdom-less environment (#13157)",
        "diff": [
          {
            "removed": "",
            "added": "global.hasOwnProperty('requestAnimationFrame') ||"
          },
          {
            "removed": "",
            "added": "global.hasOwnProperty('requestIdleCallback') ||"
          },
          {
            "removed": "",
            "added": "global.hasOwnProperty('window')"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom/src/__tests__/ReactMultiChildReconcile-test.js",
    "commits": [
      {
        "commit": "d9c1dbd61772f8f8ab0cdf389e70463d704c480b",
        "message": "Use Yarn Workspaces (#11252)\n\n* Enable Yarn workspaces for packages/*\r\n\r\n* Move src/isomorphic/* into packages/react/src/*\r\n\r\n* Create index.js stubs for all packages in packages/*\r\n\r\nThis makes the test pass again, but breaks the build because npm/ folders aren't used yet.\r\nI'm not sure if we'll keep this structure--I'll just keep working and fix the build after it settles down.\r\n\r\n* Put FB entry point for react-dom into packages/*\r\n\r\n* Move src/renderers/testing/* into packages/react-test-renderer/src/*\r\n\r\nNote that this is currently broken because Jest ignores node_modules,\r\nand so Yarn linking makes Jest skip React source when transforming.\r\n\r\n* Remove src/node_modules\r\n\r\nIt is now unnecessary. Some tests fail though.\r\n\r\n* Add a hacky workaround for Jest/Workspaces issue\r\n\r\nJest sees node_modules and thinks it's third party code.\r\n\r\nThis is a hacky way to teach Jest to still transform anything in node_modules/react*\r\nif it resolves outside of node_modules (such as to our packages/*) folder.\r\n\r\nI'm not very happy with this and we should revisit.\r\n\r\n* Add a fake react-native package\r\n\r\n* Move src/renderers/art/* into packages/react-art/src/*\r\n\r\n* Move src/renderers/noop/* into packages/react-noop-renderer/src/*\r\n\r\n* Move src/renderers/dom/* into packages/react-dom/src/*\r\n\r\n* Move src/renderers/shared/fiber/* into packages/react-reconciler/src/*\r\n\r\n* Move DOM/reconciler tests I previously forgot to move\r\n\r\n* Move src/renderers/native-*/* into packages/react-native-*/src/*\r\n\r\n* Move shared code into packages/shared\r\n\r\nIt's not super clear how to organize this properly yet.\r\n\r\n* Add back files that somehow got lost\r\n\r\n* Fix the build\r\n\r\n* Prettier\r\n\r\n* Add missing license headers\r\n\r\n* Fix an issue that caused mocks to get included into build\r\n\r\n* Update other references to src/\r\n\r\n* Re-run Prettier\r\n\r\n* Fix lint\r\n\r\n* Fix weird Flow violation\r\n\r\nI didn't change this file but Flow started complaining.\r\nCaleb said this annotation was unnecessarily using $Abstract though so I removed it.\r\n\r\n* Update sizes\r\n\r\n* Fix stats script\r\n\r\n* Fix packaging fixtures\r\n\r\nUse file: instead of NODE_PATH since NODE_PATH.\r\nNODE_PATH trick only worked because we had no react/react-dom in root node_modules, but now we do.\r\n\r\nfile: dependency only works as I expect in Yarn, so I moved the packaging fixtures to use Yarn and committed lockfiles.\r\nVerified that the page shows up.\r\n\r\n* Fix art fixture\r\n\r\n* Fix reconciler fixture\r\n\r\n* Fix SSR fixture\r\n\r\n* Rename native packages",
        "diff": [
          {
            "removed": "",
            "added": "    if (!obj.hasOwnProperty(name)) {"
          },
          {
            "removed": "",
            "added": "    if (!nonEmptyStatusDisplays.hasOwnProperty(username)) {"
          },
          {
            "removed": "",
            "added": "    if (!nonEmptyStatusProps.hasOwnProperty(username)) {"
          },
          {
            "removed": "",
            "added": "    if (!statusDisplays.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "    if (!statusDisplays.hasOwnProperty(username)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-core/src/backend.js",
    "commits": [
      {
        "commit": "45dff31a7583ec0778f294b20b86c702f0bbc2b1",
        "message": "Patched up react-devtools-core Webpack configs",
        "diff": [
          {
            "removed": ");",
            "added": "if (!hook.hasOwnProperty('resolveRNStyle')) {"
          },
          {
            "removed": "",
            "added": "if (!hook.hasOwnProperty('nativeStyleEditorValidAttributes')) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/server/ReactFizzConfigDOM.js",
    "commits": [
      {
        "commit": "ffb8eaca5966fc7733bd0a23f4055e26d2cc59d7",
        "message": "Rename ReactServerFormatConfig to ReactFizzConfig (#26591)\n\npart of https://github.com/facebook/react/pull/26571\r\n\r\nmerging separately to improve tracking of file renames",
        "diff": [
          {
            "removed": "",
            "added": "        options.hasOwnProperty('crossOrigin')"
          }
        ]
      },
      {
        "commit": "bbc8530ed7a67859583a7c990ac51cd39c7746e5",
        "message": "[Float] Refactor public interface and internal HostDispatcher implementation (#27361)\n\nWhen Float was first developed the internal implementation and external\r\ninterface were the same. This is problematic for a few reasons. One, the\r\npublic interface is typed but it is also untrusted and we should not\r\nassume that it is actually respected. Two, the internal implementations\r\ncan get called from places other than the the public interface and\r\nhaving to construct an options argument that ends up being destructured\r\nto process the request is computationally wasteful and may limit JIT\r\noptimizations to some degree. Lastly, the wire format was not as\r\ncompressed as it could be and it was untyped.\r\n\r\nThis refactor aims to address that by separating the public interface\r\nfrom the internal implementations so we can solve these challenges and\r\nalso make it easier to change Float in the future\r\n\r\n* The internal dispatcher method preinit is now preinitStyle and\r\npreinitScript.\r\n* The internal dispatcher method preinitModule is now\r\npreinitModuleScript in anticipation of different implementations for\r\nother module types in the future.\r\n* The wire format is explicitly typed and only includes options if they\r\nare actually used omitting undefined and nulls.\r\n* Some function arguments are not options even if they are optional. For\r\ninstance precedence can be null/undefined because we deafult it to\r\n'default' however we don't cosnider this an option because it is not\r\nsomething we transparently apply as props to the underlying instance.\r\n* Fixes a problem with keying images in flight where srcset and sizes\r\nwere not being taken into account.\r\n* Moves argument validation into the ReactDOMFloat file where it is\r\nshared with all runtimes that expose these methods\r\n* Fixes crossOrigin serialization to use empty string except when\r\n'use-credentials'",
        "diff": [
          {
            "removed": "options.hasOwnProperty('crossOrigin')",
            "added": ""
          }
        ]
      },
      {
        "commit": "b775564d35d6fe9f9acead0f380bbc86bb6bdd2c",
        "message": "[Fizz] Ensure Resumable State is Serializable (#27388)\n\nMoves writing queues to renderState.\r\n\r\nWe shouldn't need the resource tracking's value. We just need to know if\r\nthat resource has already been emitted. We can use a Set for this. To\r\nensure that set is directly serializable we can just use a\r\ndictionary-like object with no value.\r\n\r\nSee individual commits for special cases.",
        "diff": [
          {
            "removed": "",
            "added": "if (!resumableState.stylesMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (preloadResource.state & Flushed) {",
            "added": "if (resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "if (!resumableState.stylesMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "if (!resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "resource = {",
            "added": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "preloadResource.state |= Blocked;",
            "added": "if (resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "resource = {",
            "added": "if (!resumableState.preconnectsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "resource = {",
            "added": "if (!resumableState.preconnectsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (!resource) {",
            "added": "if (!resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "resource = {",
            "added": "if (!resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (!resource) {",
            "added": "if (!resumableState.stylesMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "} else if (resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "resource = {",
            "added": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "resource = {",
            "added": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (resumableState.preloadsMap.has(key)) {",
            "added": "if (resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (resumableState.preloadsMap.has(key)) {",
            "added": "if (resumableState.preloadsMap.hasOwnProperty(key)) {"
          },
          {
            "removed": "resource = {",
            "added": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {"
          }
        ]
      },
      {
        "commit": "49eba01930e9e1f331b34967fca65d5a0ba62846",
        "message": "[Fizz][Float] Refactor Resources  (#27400)\n\nRefactors Resources to have a more compact and memory efficient\r\nstruture. Resources generally are just an Array of chunks. A resource is\r\nflushed when it's chunks is length zero. A resource does not have any\r\nother state.\r\n\r\nStylesheets and Style tags are different and have been modeled as a unit\r\nas a StyleQueue. This object stores the style rules to flush as part of\r\nstyle tags using precedence as well as all the stylesheets associated\r\nwith the precedence. Stylesheets still need to track state because it\r\naffects how we issue boundary completion instructions. Additionally\r\nstylesheets encode chunks lazily because we may never write them as html\r\nif they are discovered late.\r\n\r\nThe preload props transfer is now maximally compact (only stores the\r\nprops we would ever actually adopt) and only stores props for\r\nstylesheets and scripts because other preloads have no resource\r\ncounterpart to adopt props into. The ResumableState maps that track\r\nwhich keys have been observed are being overloaded. Previously if a key\r\nwas found it meant that a resource already exists (either in this render\r\nor in a prior prerender). Now we discriminate between null and object\r\nvalues. If map value is null we can assume the resource exists but if it\r\nis an object that represents a prior preload for that resource and the\r\nresource must still be constructed.",
        "diff": [
          {
            "removed": "if (!resumableState.stylesMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "if (resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasKey = resumableState.styleResources.hasOwnProperty(key);"
          },
          {
            "removed": "if (!resumableState.stylesMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasKey = resumableState.styleResources.hasOwnProperty(key);"
          },
          {
            "removed": "if (!resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "} else if (!resumableState.imageResources.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasKey = resources.hasOwnProperty(key);"
          },
          {
            "removed": "if (resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "if (!resumableState.preconnectsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (!resumableState.dnsResources.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (!resumableState.preconnectsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (!resources.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (!resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (resumableState.imageResources.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "if (resumableState.styleResources.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "if (resumableState.scriptResources.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "const hasAsType = resumableState.unknownResources.hasOwnProperty(as);"
          },
          {
            "removed": "",
            "added": "if (resources.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (!resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (resumableState.moduleScriptResources.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "resumableState.moduleUnknownResources.hasOwnProperty(as);"
          },
          {
            "removed": "",
            "added": "if (resources.hasOwnProperty(key)) {"
          },
          {
            "removed": "if (!resumableState.stylesMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "} else if (resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasKey = resumableState.styleResources.hasOwnProperty(key);"
          },
          {
            "removed": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasKey = resumableState.scriptResources.hasOwnProperty(key);"
          },
          {
            "removed": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);"
          },
          {
            "removed": "if (resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "if (resumableState.preloadsMap.hasOwnProperty(key)) {",
            "added": "if ("
          },
          {
            "removed": "",
            "added": "resumableState.scriptResources.hasOwnProperty(key) ||"
          },
          {
            "removed": "",
            "added": "resumableState.moduleScriptResources.hasOwnProperty(key)"
          },
          {
            "removed": "if (!resumableState.scriptsMap.hasOwnProperty(key)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (!resumableState.scriptResources.hasOwnProperty(key)) {"
          }
        ]
      },
      {
        "commit": "2983249dd2bb1a295f27939e36ab0de9e4bfab76",
        "message": "[Fizz] implement `onHeaders` and `headersLengthHint` options (#27641)\n\nAdds a new option to `react-dom/server` entrypoints.\r\n\r\n`onHeaders: (headers: Headers) => void` (non node envs)\r\n`onHeaders: (headers: { Link?: string }) => void` (node envs)\r\n\r\nWhen any `renderTo...` or `prerender...` function is called and this\r\noption is provided the supplied function will be called sometime on or\r\nbefore completion of the render with some preload link headers.\r\n\r\nWhen provided during a `renderTo...` the callback will usually be called\r\nafter the first pass at work. The idea here is we want to get a set of\r\nheaders to start the browser loading well before the shell is ready. We\r\ndon't wait for the shell because if we did we may as well send the\r\npreloads as tags in the HTML.\r\n\r\nWhen provided during a `prerender...` the callback will be called after\r\nthe entire prerender is complete. The idea here is we are not responding\r\nto a live request and it is preferable to capture as much as possible\r\nfor preloading as Headers in case the prerender was unable to finish the\r\nshell.\r\n\r\nCurrently the following resources are always preloaded as headers when\r\nthe option is provided\r\n1. prefetchDNS and preconnects\r\n2. font preloads\r\n3. high priority image preloads\r\n\r\nAdditionally if we are providing headers when the shell is incomplete\r\n(regardless of whether it is render or prerender) we will also include\r\nany stylesheet Resources (ones with a precedence prop)\r\n\r\nThere is a second option `maxHeadersLength?: number` which allows you to\r\nspecify the maximum length of the header content in unicode code units.\r\nThis is what you get when you read the length property of a string in\r\njavascript. It's improtant to note that this is not the same as the\r\nutf-8 byte length when these headers are serialized in a Response. The\r\nutf8 representation may be the same size, or larger but it will never be\r\nsmaller.\r\n\r\nIf you do not supply a `maxHeadersLength` we defaul to `2000`. This was\r\nchosen as half the value of the max headers length supported by commonly\r\nknown web servers and CDNs. many browser and web server can support\r\nsignificantly more headers than this so you can use this option to\r\nincrease the headers limit. You can also of course use it to be even\r\nmore conservative. Again it is important to keep in mind there is no\r\ndirect translation between the max length and the bytelength and so if\r\nyou want to stay under a certain byte length you need to be potentially\r\nmore aggressive in the maxHeadersLength you choose.\r\n\r\nConceptually `onHeaders` could be called more than once as new headers\r\nare discovered however if we haven't started flushing yet but since most\r\nAPIs for the server including the web standard Response only allow you\r\nto set headers once the current implementation will only call it one\r\ntime",
        "diff": [
          {
            "removed": "if (!resources.hasOwnProperty(key)) {",
            "added": ""
          }
        ]
      },
      {
        "commit": "208ceeb46ca2838c9bf24cd341435f87b2d50569",
        "message": "Cleanup enableFloat flag (#28613)\n\nCleanup enableFloat flag",
        "diff": [
          {
            "removed": "const hasKey = resumableState.styleResources.hasOwnProperty(key);",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasKey = resumableState.styleResources.hasOwnProperty(key);"
          },
          {
            "removed": "",
            "added": "const hasKey = resumableState.styleResources.hasOwnProperty(key);"
          },
          {
            "removed": "const hasKey = resumableState.styleResources.hasOwnProperty(key);",
            "added": ""
          },
          {
            "removed": "const hasKey = resources.hasOwnProperty(key);",
            "added": ""
          },
          {
            "removed": "resources[key] = EXISTS;",
            "added": "const hasKey = resources.hasOwnProperty(key);"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/shared/ReactDOMUnknownPropertyHook.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "      if (registrationNameDependencies.hasOwnProperty(name)) {"
          },
          {
            "removed": "",
            "added": "      const registrationName = possibleRegistrationNames.hasOwnProperty("
          },
          {
            "removed": "",
            "added": "    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/shared/warnValidStyle.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {"
          },
          {
            "removed": "",
            "added": "    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {"
          },
          {
            "removed": "",
            "added": "    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/shared/ReactDOMInvalidARIAHook.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "      const correctName = validAriaProperties.hasOwnProperty(ariaName)"
          },
          {
            "removed": "",
            "added": "      const standardName = validAriaProperties.hasOwnProperty(lowerCasedName)"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/events/SyntheticEvent.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "      if (!Interface.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/events/getVendorPrefixedEventName.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/client/inputValueTracking.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "    node.hasOwnProperty(valueField) ||"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/client/ReactDOMSelect.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "      const selected = selectedValue.hasOwnProperty('$' + options[i].value);"
          }
        ]
      },
      {
        "commit": "587cb8f8967866139bbfdbae3f519cb37e68a054",
        "message": "[Fiber] Replay onChange Events if input/textarea/select has changed before hydration (#33129)\n\nThis fixes a long standing issue that controlled inputs gets out of sync\nwith the browser state if it's changed before we hydrate.\n\nThis resolves the issue by replaying the change events (click, input and\nchange) if the value has changed by the time we commit the hydration.\nThat way you can reflect the new value in state to bring it in sync. It\ndoes this whether controlled or uncontrolled.\n\nThe idea is that this should be ok to replay because it's similar to the\ncontinuous events in that it doesn't replay a sequence but only reflects\nthe current state of the tree.\n\nSince this is a breaking change I added it behind\n`enableHydrationChangeEvent` flag.\n\nThere is still an additional issue remaining that I intend to address in\na follow up. If a `useLayoutEffect` triggers an sync rerender on\nhydration (always a bad idea) then that can rerender before we have had\na chance to replay the change events. If that renders through a input\nthen that input will always override the browser value with the\ncontrolled value. Which will reset it before we've had a change to\nupdate to the new value.",
        "diff": [
          {
            "removed": "",
            "added": "const expectedSelected = selectedValue.hasOwnProperty("
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/client/ReactFiberConfigDOM.js",
    "commits": [
      {
        "commit": "b55d31955982851284bb437a5187a6c56e366539",
        "message": "Rename HostConfig files to FiberConfig to clarify they are configs fo… (#26592)\n\npart of https://github.com/facebook/react/pull/26571\r\n\r\nmerging separately to improve tracking of files renames in git\r\n\r\nRename HostConfig files to FiberConfig to clarify they are configs for\r\nFiber and not Fizz/Flight. This better conforms to the naming used in\r\nFlight and now Fizz of `ReactFlightServerConfig` and `ReactFizzConfig`",
        "diff": [
          {
            "removed": "",
            "added": "    styleProp.hasOwnProperty('display')"
          }
        ]
      },
      {
        "commit": "a4d122f2d192fe0b6480e669cca43c8f953aaf85",
        "message": "Add <ViewTransition> Component (#31975)\n\nThis will provide the opt-in for using [View\nTransitions](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API)\nin React.\n\nView Transitions only trigger for async updates like `startTransition`,\n`useDeferredValue`, Actions or `<Suspense>` revealing from fallback to\ncontent. Synchronous updates provide an opt-out but also guarantee that\nthey commit immediately which View Transitions can't.\n\nThere's no need to opt-in to View Transitions at the \"cause\" side like\nevent handlers or actions. They don't know what UI will change and\nwhether that has an animated transition described.\n\nConceptually the `<ViewTransition>` component is like a DOM fragment\nthat transitions its children in its own isolate/snapshot. The API works\nby wrapping a DOM node or inner component:\n\n```js\nimport {ViewTransition} from 'react';\n\n<ViewTransition><Component /></ViewTransition>\n```\n\nThe default is `name=\"auto\"` which will automatically assign a\n`view-transition-name` to the inner DOM node. That way you can add a\nView Transition to a Component without controlling its DOM nodes styling\notherwise.\n\nA difference between this and the browser's built-in\n`view-transition-name: auto` is that switching the DOM nodes within the\n`<ViewTransition>` component preserves the same name so this example\ncross-fades between the DOM nodes instead of causing an exit and enter:\n\n```js\n<ViewTransition>{condition ? <ComponentA /> : <ComponentB />}</ViewTransition>\n```\n\nThis becomes especially useful with `<Suspense>` as this example\ncross-fades between Skeleton and Content:\n\n```js\n<ViewTransition>\n  <Suspense fallback={<Skeleton />}>\n    <Content />\n  </Suspense>\n</ViewTransition>\n```\n\nWhere as this example triggers an exit of the Skeleton and an enter of\nthe Content:\n\n```js\n<Suspense fallback={<ViewTransition><Skeleton /></ViewTransition>}>\n  <ViewTransition><Content /></ViewTransition>\n</Suspense>\n```\n\nManaging instances and keys becomes extra important.\n\nYou can also specify an explicit `name` property for example for\nanimating the same conceptual item from one page onto another. However,\nbest practices is to property namespace these since they can easily\ncollide. It's also useful to add an `id` to it if available.\n\n```js\n<ViewTransition name=\"my-shared-view\">\n```\n\nThe model in general is the same as plain `view-transition-name` except\nReact manages a set of heuristics for when to apply it. A problem with\nthe naive View Transitions model is that it overly opts in every\nboundary that *might* transition into transitioning. This is leads to\nunfortunate effects like things floating around when unrelated updates\nhappen. This leads the whole document to animate which means that\nnothing is clickable in the meantime. It makes it not useful for smaller\nand more local transitions. Best practice is to add\n`view-transition-name` only right before you're about to need to animate\nthe thing. This is tricky to manage globally on complex apps and is not\ncompositional. Instead we let React manage when a `<ViewTransition>`\n\"activates\" and add/remove the `view-transition-name`. This is also when\nReact calls `startViewTransition` behind the scenes while it mutates the\nDOM.\n\nI've come up with a number of heuristics that I think will make a lot\neasier to coordinate this. The principle is that only if something that\nupdates that particular boundary do we activate it. I hope that one day\nmaybe browsers will have something like these built-in and we can remove\nour implementation.\n\nA `<ViewTransition>` only activates if:\n\n- If a mounted Component renders a `<ViewTransition>` within it outside\nthe first DOM node, and it is within the viewport, then that\nViewTransition activates as an \"enter\" animation. This avoids inner\n\"enter\" animations trigger when the parent mounts.\n- If an unmounted Component had a `<ViewTransition>` within it outside\nthe first DOM node, and it was within the viewport, then that\nViewTransition activates as an \"exit\" animation. This avoids inner\n\"exit\" animations triggering when the parent unmounts.\n- If an explicitly named `<ViewTransition name=\"...\">` is deep within an\nunmounted tree and one with the same name appears in a mounted tree at\nthe same time, then both are activated as a pair, but only if they're\nboth in the viewport. This avoids these triggering \"enter\" or \"exit\"\nanimations when going between parents that don't have a pair.\n- If an already mounted `<ViewTransition>` is visible and a DOM\nmutation, that might affect how it's painted, happens within its\nchildren but outside any nested `<ViewTransition>`. This allows it to\n\"cross-fade\" between its updates.\n- If an already mounted `<ViewTransition>` resizes or moves as the\nresult of direct DOM nodes siblings changing or moving around. This\nallows insertion, deletion and reorders into a list to animate all\nchildren. It is only within one DOM node though, to avoid unrelated\nchanges in the parent to trigger this. If an item is outside the\nviewport before and after, then it's skipped to avoid things flying\nacross the screen.\n- If a `<ViewTransition>` boundary changes size, due to a DOM mutation\nwithin it, then the parent activates (or the root document if there are\nno more parents). This ensures that the container can cross-fade to\navoid abrupt relayout. This can be avoided by using absolutely\npositioned children. When this can avoid bubbling to the root document,\nwhatever is not animating is still responsive to clicks during the\ntransition.\n\nConceptually each DOM node has its own default that activates the parent\n`<ViewTransition>` or no transition if the parent is the root. That\nmeans that if you add a DOM node like `<div><ViewTransition><Component\n/></ViewTransition></div>` this won't trigger an \"enter\" animation since\nit was the div that was added, not the ViewTransition. Instead, it might\ncause a cross-fade of the parent ViewTransition or no transition if it\nhad no parent. This ensures that only explicit boundaries perform coarse\nanimations instead of every single node which is really the benefit of\nthe View Transitions model. This ends up working out well for simple\ncases like switching between two pages immediately while transitioning\none floating item that appears on both pages. Because only the floating\nitem transitions by default.\n\nNote that it's possible to add manual `view-transition-name` with CSS or\n`style={{ viewTransitionName: 'auto' }}` that always transitions as long\nas something else has a `<ViewTransition>` that activates. For example a\n`<ViewTransition>` can wrap a whole page for a cross-fade but inside of\nit an explicit name can be added to something to ensure it animates as a\nmove when something relates else changes its layout. Instead of just\ncross-fading it along with the Page which would be the default.\n\nThere's more PRs coming with some optimizations, fixes and expanded\nAPIs. This first PR explores the above core heuristic.\n\n---------\n\nCo-authored-by: Sebastian \"Sebbie\" Silbermann <silbermann.sebastian@gmail.com>",
        "diff": [
          {
            "removed": "",
            "added": "? styleProp.hasOwnProperty('viewTransitionName')"
          },
          {
            "removed": "",
            "added": ": styleProp.hasOwnProperty('view-transition-name')"
          }
        ]
      },
      {
        "commit": "3a5496b3f56f1c0b138811a564299ee0b64a64ba",
        "message": "[Fiber] Use className on <ViewTransition> to assign view-transition-class (#31999)\n\nStacked on #31975.\n\nThis is the primary way we recommend styling your View Transitions since\nit allows for reusable styling such as a CSS library specializing in\nView Transitions in a way that's composable and without naming\nconflicts. E.g.\n\n```js\n<ViewTransition className=\"enter-slide-in exit-fade-out update-cross-fade\">\n```\n\nThis doesn't change the HTML `class` attribute. It's not a CSS class.\nInstead it assign the `view-transition-class` style prop of the\nunderlying DOM node while it's transitioning.\n\nYou can also just use `<div style={{viewTransitionClass: ...}}>` on the\nDOM node but it's convenient to control the Transition completely from\nthe outside and conceptually we're transitioning the whole fragment. You\ncan even make Transition components that just wraps existing components.\n`<RevealTransition><Component /></RevealTransition>` this way.\n\nSince you can also have multiple wrappers for different circumstances it\nallows React's heuristics to use different classes for different\nscenarios. We'll likely add more options like configuring different\nclasses for different `types` or scenarios that can't be described by\nCSS alone.\n\n## CSS Modules\n\n```js\nimport transitions from './transitions.module.css';\n\n<ViewTransition className={transitions.bounceIn}>...</ViewTransition>\n```\n\nCSS Modules works well with this strategy because you can have globally\nunique namespaces and define your transitions in the CSS modules as a\nlibrary that you can import. [As seen in the fixture\nhere.](https://github.com/facebook/react/commit/8b91b37bb8b4add5f3f8be5ef8f49bb23966b13b#diff-b4d9854171ffdac4d2c01be92a5eff4f8e9e761e6af953094f99ca243b054a85R11)\n\nI did notice an unfortunate bug in how CSS Modules (at least in Webpack)\ngenerates class names. Sometimes the `+` character is used in the hash\nof the class name which is not valid for `view-transition-class` and so\nit breaks. I had to rename my class names until the hash yielded\nsomething different to work around it. Ideally that bug gets fixed soon.\n\n## className, rly?\n\n`className` isn't exactly the most loved property name, however, I'm\nusing `className` here too for consistency. Even though in this case\nthere's no direct equivalent DOM property name. The CSS property is\nnamed `viewTransitionClass`, but the \"viewTransition\" prefix is implied\nby the Component it is on in this case. For most people the fact that\nthis is actually a different namespace than other CSS classes doesn't\nmatter. You'll most just use a CSS library anyway and conceptually\nyou're just assigning classes the same way as `className` on a DOM node.\n\nBut if we ever rename the `class` prop then we can do that for this one\nas well.",
        "diff": [
          {
            "removed": "",
            "added": "? styleProp.hasOwnProperty('viewTransitionClass')"
          },
          {
            "removed": "",
            "added": ": styleProp.hasOwnProperty('view-transition-class')"
          }
        ]
      },
      {
        "commit": "365c031fd2354e94248ed9390f13fe2975b994f6",
        "message": "Workaround against display: inline bug in Safari (#32822)\n\nSafari has a bug where if you put a block element inside an inline\nelement and the inline element has a `view-transition-name` assigned it\nfinds it as duplicate names.\n\nhttps://bugs.webkit.org/show_bug.cgi?id=290923\n\nThis adds a warning if we detect this scenario in dev mode.\n\nFor the case where it renders into a single block, we can model this by\nmaking the parent either `block` or `inline-block` automatically to fix\nthe issue. So we do that to automatically cover simple cases like\n`<a><div>...</div></a>`. This unfortunately causes layout/styling thrash\nso we might want to delete it once the bug has been fixed in enough\nSafari versions.",
        "diff": [
          {
            "removed": "",
            "added": "const marginTop = styleProp.hasOwnProperty('marginTop')"
          },
          {
            "removed": "",
            "added": "const marginBottom = styleProp.hasOwnProperty('marginBottom')"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/client/CSSPropertyOperations.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "      if (!styles.hasOwnProperty(styleName)) {"
          },
          {
            "removed": "",
            "added": "    if (!styles.hasOwnProperty(styleName)) {"
          }
        ]
      },
      {
        "commit": "520f7f3ed4d01e9e50a73d7d04ff138e3c71ac86",
        "message": "Refactor ReactDOMComponent to use flatter property operations (#26433)\n\nThis is in line with the refactor I already did on Fizz earlier and\r\nbrings Fiber up to a similar structure.\r\n\r\nWe end up with a lot of extra checks due the extra abstractions we use\r\nto check the various properties. This uses a flatter and more inline\r\nmodel which makes it easier to see what each property does. The tradeoff\r\nis that a change might need changes in more places.\r\n\r\nThe general structure is that there's a switch for tag first, then a\r\nswitch for each attribute special case, then a switch for the value. So\r\nit's easy to follow where each scenario will end up and there shouldn't\r\nbe any unnecessary code executed along the way.\r\n\r\nMy goal is to eventually get rid of the meta-programming in DOMProperty\r\nand CSSProperty but I'm leaving that in for now - in line with Fizz.\r\n\r\nMy next step is moving around things a bit in the diff/commit phases.\r\nThis is the first step to more refactors for perf and size, but also\r\nbecause I'm adding more special cases so I need to have a flatter\r\nstructure that I can reason about for those special cases.",
        "diff": [
          {
            "removed": "",
            "added": "isUnitlessNumber.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "",
            "added": "isUnitlessNumber.hasOwnProperty(styleName) &&"
          }
        ]
      },
      {
        "commit": "73deff0d5162160c0aafa5cd0b87e11143fe9938",
        "message": "Refactor DOMProperty and CSSProperty (#26513)\n\nThis is a step towards getting rid of the meta programming in\r\nDOMProperty and CSSProperty.\r\n\r\nThis moves isAttributeNameSafe and isUnitlessNumber to a separate shared\r\nmodules.\r\n\r\nisUnitlessNumber is now a single switch instead of meta-programming.\r\nThere is a slight behavior change here in that I hard code a specific\r\nset of vendor-prefixed attributes instead of prefixing all the unitless\r\nproperties. I based this list on what getComputedStyle returns in\r\ncurrent browsers. I removed Opera prefixes because they were [removed in\r\nOpera](https://dev.opera.com/blog/css-vendor-prefixes-in-opera-12-50-snapshots/)\r\nitself. I included the ms ones mentioned [in the original\r\nPR](https://github.com/facebook/react/commit/5abcce534382d85887f3d33475e8e54e3b5d8457).\r\nThese shouldn't really be used anymore anyway so should be pretty safe.\r\nWorst case, they'll fallback to the other property if you specify both.\r\n\r\nFinally I inline the mustUseProperty special cases - which are also the\r\nonly thing that uses propertyName. These are really all controlled\r\ncomponents and all booleans.\r\n\r\nI'm making a small breaking change here by treating `checked` and\r\n`selected` specially only on the `input` and `option` tags instead of\r\nall tags. That's because those are the only DOM nodes that actually have\r\nthose properties but we used to set them as expandos instead of\r\nattributes before. That's why one of the tests is updated to now use\r\n`input` instead of testing an expando on a `div` which isn't a real use\r\ncase. Interestingly this also uncovered that we update checked twice for\r\nsome reason but keeping that logic for now.\r\n\r\nIdeally `multiple` and `muted` should move into `select` and\r\n`audio`/`video` respectively for the same reason.\r\n\r\nNo change to the attribute-behavior fixture.",
        "diff": [
          {
            "removed": "isUnitlessNumber.hasOwnProperty(styleName) &&",
            "added": ""
          },
          {
            "removed": "isUnitlessNumber.hasOwnProperty(styleName) &&",
            "added": ""
          }
        ]
      },
      {
        "commit": "ca41adb8c1b256705f73d1fb657421a03dfad82c",
        "message": "Diff properties in the commit phase instead of generating an update payload (#26583)\n\nThis removes the concept of `prepareUpdate()`, behind a flag.\r\n\r\nReact Native already does everything in the commit phase, but generates\r\na temporary update payload before applying it.\r\n\r\nReact Fabric does it both in the render phase. Now it just moves it to a\r\nsingle host config.\r\n\r\nFor DOM I forked updateProperties into one that does diffing and\r\nupdating in one pass vs just applying a pre-diffed updatePayload.\r\n\r\nThere are a few downsides of this approach:\r\n\r\n- If only \"children\" has changed, we end up scheduling an update to be\r\ndone in the commit phase. Since we traverse through it anyway, it's\r\nprobably not much extra.\r\n- It does more work in the commit phase so for a large tree that is\r\nmostly unchanged, it'll stall longer.\r\n- It does some extra work for special cases since that work happens if\r\nanything has changed. We no longer have a deep bailout.\r\n- The special cases now have to each replicate the \"clean up old props\"\r\nloop, leading to extra code.\r\n\r\nThe benefit is that this doesn't allocate temporary extra objects\r\n(possibly multiple per element if the array has to resize). It's less\r\nwork overall. It also gives us an option to reuse this function for a\r\nsync render optimization.\r\n\r\nAnother benefit is that if we do the loop in the commit phase I can do\r\nfurther optimizations by reading all props that I need for special cases\r\nin that loop instead of polymorphic reads from props. This is what I'd\r\nlike to do in future refactors that would be stacked on top of this\r\nchange.",
        "diff": [
          {
            "removed": "if (!styles.hasOwnProperty(styleName)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "prevStyles.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "",
            "added": "(styles == null || !styles.hasOwnProperty(styleName))"
          },
          {
            "removed": "",
            "added": "if (styles.hasOwnProperty(styleName) && prevStyles[styleName] !== value) {"
          },
          {
            "removed": "",
            "added": "if (styles.hasOwnProperty(styleName)) {"
          },
          {
            "removed": "",
            "added": "if (prevStyles.hasOwnProperty(key) && !nextStyles.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "nextStyles.hasOwnProperty(key) &&"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-dom-bindings/src/client/ReactDOMComponent.js",
    "commits": [
      {
        "commit": "97d75c9c8bcddb0daed1ed062101c7f5e9b825f4",
        "message": "Move react-dom implementation files to react-dom-bindings (#25345)\n\nThis lets us share it with react-server-dom-webpack while still having a\r\ndependency on react-dom. It also makes somewhat sense from a bundling\r\nperspective since react-dom is an external to itself.",
        "diff": [
          {
            "removed": "",
            "added": "    if (!nextProps.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "      nextProps.hasOwnProperty(propKey) ||"
          },
          {
            "removed": "",
            "added": "      !lastProps.hasOwnProperty(propKey) ||"
          },
          {
            "removed": "",
            "added": "        if (lastStyle.hasOwnProperty(styleName)) {"
          },
          {
            "removed": "",
            "added": "    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "      !nextProps.hasOwnProperty(propKey) ||"
          },
          {
            "removed": "",
            "added": "            lastProp.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "",
            "added": "            (!nextProp || !nextProp.hasOwnProperty(styleName))"
          },
          {
            "removed": "",
            "added": "            nextProp.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "",
            "added": "    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {"
          },
          {
            "removed": "",
            "added": "    if (!rawProps.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          }
        ]
      },
      {
        "commit": "8fa41ffa275cae4895b650b0c3b5e8acdbb5055d",
        "message": "Don't \"fix up\" mismatched text content with suppressedHydrationWarning (#26391)\n\nIn concurrent mode we error if child nodes mismatches which triggers a\r\nrecreation of the whole hydration boundary. This ensures that we don't\r\nreplay the wrong thing, transform state or other security issues.\r\n\r\nFor text content, we respect `suppressedHydrationWarning` to allow for\r\nthings like `<div suppressedHydrationWarning>{timestamp}</div>` to\r\nignore the timestamp. This mode actually still patches up the text\r\ncontent to be the client rendered content.\r\n\r\nIn principle we shouldn't have to do that because either value should be\r\nok, and arguably it's better not to trigger layout thrash after the\r\nfact.\r\n\r\nWe do have a lot of code still to deal with patching up the tree because\r\nthat's what legacy mode does which is still in the code base. When we\r\ndelete legacy mode we would still be stuck with a lot of it just to deal\r\nwith this case.\r\n\r\nTherefore I propose that we change the semantics to not patch up\r\nhydration errors for text nodes. We already don't for attributes.",
        "diff": [
          {
            "removed": "isCustomComponentTag = isCustomComponent(tag, rawProps);",
            "added": "if (rawProps.hasOwnProperty('onScroll')) {"
          },
          {
            "removed": "if (!rawProps.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "} else if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (!rawProps.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "} else if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          }
        ]
      },
      {
        "commit": "520f7f3ed4d01e9e50a73d7d04ff138e3c71ac86",
        "message": "Refactor ReactDOMComponent to use flatter property operations (#26433)\n\nThis is in line with the refactor I already did on Fizz earlier and\r\nbrings Fiber up to a similar structure.\r\n\r\nWe end up with a lot of extra checks due the extra abstractions we use\r\nto check the various properties. This uses a flatter and more inline\r\nmodel which makes it easier to see what each property does. The tradeoff\r\nis that a change might need changes in more places.\r\n\r\nThe general structure is that there's a switch for tag first, then a\r\nswitch for each attribute special case, then a switch for the value. So\r\nit's easy to follow where each scenario will end up and there shouldn't\r\nbe any unnecessary code executed along the way.\r\n\r\nMy goal is to eventually get rid of the meta-programming in DOMProperty\r\nand CSSProperty but I'm leaving that in for now - in line with Fizz.\r\n\r\nMy next step is moving around things a bit in the diff/commit phases.\r\nThis is the first step to more refactors for perf and size, but also\r\nbecause I'm adding more special cases so I need to have a flatter\r\nstructure that I can reason about for those special cases.",
        "diff": [
          {
            "removed": "} else if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "if (lastStyle.hasOwnProperty(styleName)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (lastStyle.hasOwnProperty(styleName)) {"
          },
          {
            "removed": "} else if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "lastProp.hasOwnProperty(styleName) &&",
            "added": ""
          },
          {
            "removed": "(!nextProp || !nextProp.hasOwnProperty(styleName))",
            "added": ""
          },
          {
            "removed": "nextProp.hasOwnProperty(styleName) &&",
            "added": ""
          },
          {
            "removed": "",
            "added": "lastProp.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "",
            "added": "(!nextProp || !nextProp.hasOwnProperty(styleName))"
          },
          {
            "removed": "",
            "added": "nextProp.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "} else if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!rawProps.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!rawProps.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (registrationNameDependencies.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "if (!rawProps.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "} else if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          }
        ]
      },
      {
        "commit": "85de6fde515148babd36eae2b7384ad8e62b732a",
        "message": "Refactor DOM special cases per tags including controlled fields (#26501)\n\nI use a shared helper when setting properties into a helper whether it's\r\ninitial or update.\r\n\r\nI moved the special cases per tag to commit phase so we can check it\r\nonly once. This also effectively inlines getHostProps which can be done\r\nin a single check per prop key.\r\n\r\nThe diffProperties operation is simplified to mostly just generating a\r\nplain diff of all properties, generating an update payload. This might\r\ngenerate a few more entries that are now ignored in the commit phase.\r\nthat previously would've been ignored earlier. We could skip this and\r\njust do the whole diff in the commit phase by always scheduling a commit\r\nphase update.\r\n\r\nI tested the attribute table (one change documented below) and a few\r\nselect DOM fixtures.",
        "diff": [
          {
            "removed": "if (!nextProps.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (registrationNameDependencies.hasOwnProperty(key)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "!nextProps.hasOwnProperty(propKey) ||",
            "added": ""
          },
          {
            "removed": "(nextProp == null && lastProp == null)",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "lastProp.hasOwnProperty(styleName) &&",
            "added": ""
          },
          {
            "removed": "(!nextProp || !nextProp.hasOwnProperty(styleName))",
            "added": ""
          },
          {
            "removed": "",
            "added": "lastProp.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "",
            "added": "(!nextProp || !nextProp.hasOwnProperty(styleName))"
          },
          {
            "removed": "nextProp.hasOwnProperty(styleName) &&",
            "added": ""
          },
          {
            "removed": "",
            "added": "nextProp.hasOwnProperty(styleName) &&"
          },
          {
            "removed": "if (registrationNameDependencies.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "if (!rawProps.hasOwnProperty(propKey)) {",
            "added": "for (const propKey in props) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "if (!rawProps.hasOwnProperty(propKey)) {",
            "added": "for (const propKey in props) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "if (rawProps.hasOwnProperty('onScroll')) {",
            "added": ""
          }
        ]
      },
      {
        "commit": "eeabb7312f509eb2094452a4389646000ea8ea14",
        "message": "Refactor DOM Bindings Completely Off of DOMProperty Meta Programming (#26546)\n\nThere are four places we have special cases based off the DOMProperty\r\nconfig:\r\n\r\n1) DEV-only: ReactDOMUnknownPropertyHook warns for passing booleans to\r\nnon-boolean attributes. We just need a simple list of all properties\r\nthat are affected by that. We could probably move this in under setProp\r\ninstead and have it covered by that list.\r\n2) DEV-only: Hydration. This just needs to read the value from an\r\nattribute and compare it to what we'd expect to see if it was rendered\r\non the client. This could use some simplification/unification of the\r\ncode but I decided to just keep it simple and duplicated since code size\r\nisn't an issue.\r\n3) DOMServerFormatConfig pushAttribute: This just maps the special case\r\nto how to emit it as a HTML attribute.\r\n4) ReactDOMComponent setProp: This just maps the special case to how to\r\nemit it as setAttribute or removeAttribute.\r\n\r\nBasically we just have to remember to keep pushAttribute and setProp\r\naligned. There's only one long switch in prod per environment.\r\n\r\nThis just turns it all to a giant simple switch statement with string\r\ncases. This is in theory the most optimizable since syntactically all\r\nthe information for a hash table is there. However, unfortunately we\r\nknow that most VMs don't optimize this very well and instead just turn\r\nthem into a bunch of ifs. JSC is best. We can minimize the cost by just\r\nmoving common attribute to the beginning of the list.\r\n\r\nIf we shipped this, maybe VMs will get it together to start optimizing\r\nthis case but there's a chicken and egg problem here and the game theory\r\nreality is that we probably don't want to regress. Therefore, I intend\r\nto do a follow up after landing this which reintroduces an object\r\nindirection for simple property aliases. That should be enough to make\r\nthe remaining cases palatable. I'll also extract the most common\r\nattributes to the beginning or separate ifs.\r\n\r\nRan attribute-behavior fixture and the table is the same.",
        "diff": [
          {
            "removed": "",
            "added": "registrationNameDependencies.hasOwnProperty(key) &&"
          },
          {
            "removed": "if (!props.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          }
        ]
      },
      {
        "commit": "c15579631ff4d387401d57d9006d849ca1d5cd71",
        "message": "Put common aliases in Map/Set instead of switch over strings (#26551)\n\nThis is a follow up to https://github.com/facebook/react/pull/26546\r\n\r\nThis is strictly a perf optimization since we know that switches over\r\nstrings aren't optimally implemented in current engines. Basically\r\nthey're a sequence of ifs.\r\n\r\nAs a result, we're better off putting the unusual cases in a Map and the\r\nvery common cases in the beginning of the switch. We might be better off\r\nputting very common cases in explicit ifs - just in case the engine does\r\noptimize switches to a hash table which is potentially worse.\r\n\r\n---------\r\n\r\nCo-authored-by: Sophie Alpert <git@sophiebits.com>",
        "diff": [
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "if (!props.hasOwnProperty(propKey)) {",
            "added": ""
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "if (!props.hasOwnProperty(propKey)) {",
            "added": ""
          }
        ]
      },
      {
        "commit": "ca41adb8c1b256705f73d1fb657421a03dfad82c",
        "message": "Diff properties in the commit phase instead of generating an update payload (#26583)\n\nThis removes the concept of `prepareUpdate()`, behind a flag.\r\n\r\nReact Native already does everything in the commit phase, but generates\r\na temporary update payload before applying it.\r\n\r\nReact Fabric does it both in the render phase. Now it just moves it to a\r\nsingle host config.\r\n\r\nFor DOM I forked updateProperties into one that does diffing and\r\nupdating in one pass vs just applying a pre-diffed updatePayload.\r\n\r\nThere are a few downsides of this approach:\r\n\r\n- If only \"children\" has changed, we end up scheduling an update to be\r\ndone in the commit phase. Since we traverse through it anyway, it's\r\nprobably not much extra.\r\n- It does more work in the commit phase so for a large tree that is\r\nmostly unchanged, it'll stall longer.\r\n- It does some extra work for special cases since that work happens if\r\nanything has changed. We no longer have a deep bailout.\r\n- The special cases now have to each replicate the \"clean up old props\"\r\nloop, leading to extra code.\r\n\r\nThe benefit is that this doesn't allocate temporary extra objects\r\n(possibly multiple per element if the array has to resize). It's less\r\nwork overall. It also gives us an option to reuse this function for a\r\nsync render optimization.\r\n\r\nAnother benefit is that if we do the loop in the commit phase I can do\r\nfurther optimizations by reading all props that I need for special cases\r\nin that loop instead of polymorphic reads from props. This is what I'd\r\nlike to do in future refactors that would be stacked on top of this\r\nchange.",
        "diff": [
          {
            "removed": "",
            "added": "lastProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "!nextProps.hasOwnProperty(propKey)"
          },
          {
            "removed": "",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "lastProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "!nextProps.hasOwnProperty(propKey)"
          },
          {
            "removed": "",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "lastProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "!nextProps.hasOwnProperty(propKey)"
          },
          {
            "removed": "",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "lastProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "!nextProps.hasOwnProperty(propKey)"
          },
          {
            "removed": "",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "lastProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "!nextProps.hasOwnProperty(propKey)"
          },
          {
            "removed": "",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "lastProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "!nextProps.hasOwnProperty(propKey)"
          },
          {
            "removed": "",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "lastProps.hasOwnProperty(propKey) &&"
          },
          {
            "removed": "",
            "added": "!nextProps.hasOwnProperty(propKey)"
          },
          {
            "removed": "",
            "added": "nextProps.hasOwnProperty(propKey) &&"
          }
        ]
      },
      {
        "commit": "6b90976bc10f325146b193286435a4b5015ef605",
        "message": "Use already extracted values instead of reading off props for controlled components (#26596)\n\nSince `props.x` is a possibly megamorphic access, it can be slow to\r\naccess and trigger recompilation.\r\n\r\nWhen we are looping over the props and pattern matching every key,\r\nanyway, we've already done this work. We can just reuse the same value\r\nby stashing it outside the loop in the stack.\r\n\r\nThis only makes sense for updates in diffInCommitPhase since otherwise\r\nwe don't have the full set of props in that loop.\r\n\r\nWe also have to be careful not to skip over equal values since we need\r\nto extract them anyway.",
        "diff": [
          {
            "removed": "lastProps.hasOwnProperty(propKey) &&",
            "added": ""
          },
          {
            "removed": "!nextProps.hasOwnProperty(propKey)",
            "added": ""
          },
          {
            "removed": ") {",
            "added": "if (lastProps.hasOwnProperty(propKey) && lastProp != null) {"
          },
          {
            "removed": "setProp(domElement, tag, propKey, null, nextProps, lastProp);",
            "added": "if (!nextProps.hasOwnProperty(propKey))"
          }
        ]
      },
      {
        "commit": "b433c379d55d9684945217c7d375de1082a1abb8",
        "message": "Fix input tracking bug (#26627)\n\nIn\r\nhttps://github.com/facebook/react/pull/26573/commits/2019ddc75f448292ffa6429d7625514af192631b,\r\nwe changed to set .defaultValue before .value on updates. In some cases,\r\nsetting .defaultValue causes .value to change, and since we only set\r\n.value if it has the wrong value, this resulted in us not assigning to\r\n.value, which resulted in inputValueTracking not knowing the right\r\nvalue. See new test added.\r\n\r\nMy fix here is to (a) move the value setting back up first and (b)\r\nnarrowing the fix in the aforementioned PR to newly remove the value\r\nattribute only if it defaultValue was previously present in props.\r\n\r\nThe second half is necessary because for types where the value property\r\nand attribute are indelibly linked (hidden checkbox radio submit image\r\nreset button, i.e. spec modes default or default/on from\r\nhttps://html.spec.whatwg.org/multipage/input.html#dom-input-value-default),\r\nwe can't remove the value attribute after setting .value, because that\r\nwill undo the assignment we just did! That is, not having (b) makes all\r\nof those types fail to handle updating props.value.\r\n\r\nThis code is incredibly hard to think about but I think this is right\r\n(or at least, as right as the old code was) because we set .value here\r\nonly if the nextProps.value != null, and we now remove defaultValue only\r\nif lastProps.defaultValue != null. These can't happen at the same time\r\nbecause we have long warned if value and defaultValue are simultaneously\r\nspecified, and also if a component switches between controlled and\r\nuncontrolled.\r\n\r\nAlso, it fixes the test in https://github.com/facebook/react/pull/26626.",
        "diff": [
          {
            "removed": "lastProps.hasOwnProperty(propKey) &&",
            "added": ""
          },
          {
            "removed": "!nextProps.hasOwnProperty(propKey)",
            "added": ""
          },
          {
            "removed": ") {",
            "added": "if (lastProps.hasOwnProperty(propKey) && lastProp != null) {"
          },
          {
            "removed": "checkedValue !== 'symbol';",
            "added": "if (!nextProps.hasOwnProperty(propKey)) {"
          },
          {
            "removed": "setProp(domElement, tag, propKey, null, nextProps, lastProp);",
            "added": "if (!nextProps.hasOwnProperty(propKey))"
          }
        ]
      },
      {
        "commit": "1f248bdd7199979b050e4040ceecfe72dd977fd1",
        "message": "Switching checked to null should leave the current value (#26667)\n\nI accidentally made a behavior change in the refactor. It turns out that\r\nwhen switching off `checked` to an uncontrolled component, we used to\r\nrevert to the concept of \"initialChecked\" which used to be stored on\r\nstate.\r\n\r\nWhen there's a diff to this computed prop and the value of props.checked\r\nis null, then we end up in a case where it sets `checked` to\r\n`initialChecked`:\r\n\r\n\r\nhttps://github.com/facebook/react/blob/5cbe6258bc436b1683080a6d978c27849f1d9a22/packages/react-dom-bindings/src/client/ReactDOMInput.js#L69\r\n\r\nSince we never changed `initialChecked` and it's not relevant if\r\nnon-null `checked` changes value, the only way this \"change\" could\r\ntrigger was if we move from having `checked` to having null.\r\n\r\nThis wasn't really consistent with how `value` works, where we instead\r\nleave the current value in place regardless. So this is a \"bug fix\" that\r\nchanges `checked` to be consistent with `value` and just leave the\r\ncurrent value in place. This case should already have a warning in it\r\nregardless since it's going from controlled to uncontrolled.\r\n\r\nRelated to that, there was also another issue observed in\r\nhttps://github.com/facebook/react/pull/26596#discussion_r1162295872 and\r\nhttps://github.com/facebook/react/pull/26588\r\n\r\nWe need to atomically apply mutations on radio buttons. I fixed this by\r\nsetting the name to empty before doing mutations to value/checked/type\r\nin updateInput, and then set the name to whatever it should be. Setting\r\nthe name is what ends up atomically applying the changes.\r\n\r\n---------\r\n\r\nCo-authored-by: Sophie Alpert <git@sophiebits.com>",
        "diff": [
          {
            "removed": "if (!nextProps.hasOwnProperty(propKey)) {",
            "added": ""
          }
        ]
      },
      {
        "commit": "7f6201889e8e628eeb53e05d8850ddffa3c2e74a",
        "message": "Ship diffInCommitPhase (#27409)\n\nPerformance tests at Meta showed neutral results.",
        "diff": [
          {
            "removed": "nextProps.hasOwnProperty(propKey) ||",
            "added": ""
          },
          {
            "removed": "!lastProps.hasOwnProperty(propKey) ||",
            "added": ""
          },
          {
            "removed": "if (lastStyle.hasOwnProperty(styleName)) {",
            "added": ""
          },
          {
            "removed": "nextProps.hasOwnProperty(propKey) &&",
            "added": ""
          },
          {
            "removed": "lastProp.hasOwnProperty(styleName) &&",
            "added": ""
          },
          {
            "removed": "(!nextProp || !nextProp.hasOwnProperty(styleName))",
            "added": ""
          },
          {
            "removed": "nextProp.hasOwnProperty(styleName) &&",
            "added": ""
          }
        ]
      },
      {
        "commit": "0117239720b6ea830376f4f8605957ccae8b3735",
        "message": "[Fiber] Ensure `srcset` and `src` are assigned last on `img` instances (#30340)\n\nSafari has a behavior (bug) where when you consturct an Image in\r\njavascript if you set srcset before properties for `sizes` the brwoser\r\nwill download the largest image size because it starts to load before\r\nyou communicate the sizes information.\r\n\r\n\r\nhttps://x.com/OliverJAsh/status/1812408504444989588?t=CVHPqBaUiF5-6DBPGERTDA\r\n\r\nThere are likely other combinations or property order assignment that\r\ncan cause problems such as setting crossorigin after assigning src or\r\nsrcset. Conceptually we should withold the src and srcSet from the Image\r\ninstance until last so all relevant other properties can be assigned\r\nbefore actually initiating any network activity.\r\n\r\nThis is an unforunate amount of code for what is realistically a bug in\r\nBrowsers but it should allow us to avoid weird regressions depending on\r\nprop object order.\r\n\r\nI didn't change the preload prop order because I don't believe preload\r\nlinks have the same issue (they are not fetched as eagerly I believe).\r\n\r\nOne nice benefit of this change though is the img case can move higher\r\nin the switch which is likely optimal given it's a relatively common\r\ntag. Previously it was as low as it was because it was part of the void\r\nelement set so it couldn't be elevated without elevating less common\r\ntags\r\n\r\n---------\r\n\r\nCo-authored-by: Jan Kassens <jan@kassens.net>",
        "diff": [
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propKey)) {"
          }
        ]
      },
      {
        "commit": "a4d122f2d192fe0b6480e669cca43c8f953aaf85",
        "message": "Add <ViewTransition> Component (#31975)\n\nThis will provide the opt-in for using [View\nTransitions](https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API)\nin React.\n\nView Transitions only trigger for async updates like `startTransition`,\n`useDeferredValue`, Actions or `<Suspense>` revealing from fallback to\ncontent. Synchronous updates provide an opt-out but also guarantee that\nthey commit immediately which View Transitions can't.\n\nThere's no need to opt-in to View Transitions at the \"cause\" side like\nevent handlers or actions. They don't know what UI will change and\nwhether that has an animated transition described.\n\nConceptually the `<ViewTransition>` component is like a DOM fragment\nthat transitions its children in its own isolate/snapshot. The API works\nby wrapping a DOM node or inner component:\n\n```js\nimport {ViewTransition} from 'react';\n\n<ViewTransition><Component /></ViewTransition>\n```\n\nThe default is `name=\"auto\"` which will automatically assign a\n`view-transition-name` to the inner DOM node. That way you can add a\nView Transition to a Component without controlling its DOM nodes styling\notherwise.\n\nA difference between this and the browser's built-in\n`view-transition-name: auto` is that switching the DOM nodes within the\n`<ViewTransition>` component preserves the same name so this example\ncross-fades between the DOM nodes instead of causing an exit and enter:\n\n```js\n<ViewTransition>{condition ? <ComponentA /> : <ComponentB />}</ViewTransition>\n```\n\nThis becomes especially useful with `<Suspense>` as this example\ncross-fades between Skeleton and Content:\n\n```js\n<ViewTransition>\n  <Suspense fallback={<Skeleton />}>\n    <Content />\n  </Suspense>\n</ViewTransition>\n```\n\nWhere as this example triggers an exit of the Skeleton and an enter of\nthe Content:\n\n```js\n<Suspense fallback={<ViewTransition><Skeleton /></ViewTransition>}>\n  <ViewTransition><Content /></ViewTransition>\n</Suspense>\n```\n\nManaging instances and keys becomes extra important.\n\nYou can also specify an explicit `name` property for example for\nanimating the same conceptual item from one page onto another. However,\nbest practices is to property namespace these since they can easily\ncollide. It's also useful to add an `id` to it if available.\n\n```js\n<ViewTransition name=\"my-shared-view\">\n```\n\nThe model in general is the same as plain `view-transition-name` except\nReact manages a set of heuristics for when to apply it. A problem with\nthe naive View Transitions model is that it overly opts in every\nboundary that *might* transition into transitioning. This is leads to\nunfortunate effects like things floating around when unrelated updates\nhappen. This leads the whole document to animate which means that\nnothing is clickable in the meantime. It makes it not useful for smaller\nand more local transitions. Best practice is to add\n`view-transition-name` only right before you're about to need to animate\nthe thing. This is tricky to manage globally on complex apps and is not\ncompositional. Instead we let React manage when a `<ViewTransition>`\n\"activates\" and add/remove the `view-transition-name`. This is also when\nReact calls `startViewTransition` behind the scenes while it mutates the\nDOM.\n\nI've come up with a number of heuristics that I think will make a lot\neasier to coordinate this. The principle is that only if something that\nupdates that particular boundary do we activate it. I hope that one day\nmaybe browsers will have something like these built-in and we can remove\nour implementation.\n\nA `<ViewTransition>` only activates if:\n\n- If a mounted Component renders a `<ViewTransition>` within it outside\nthe first DOM node, and it is within the viewport, then that\nViewTransition activates as an \"enter\" animation. This avoids inner\n\"enter\" animations trigger when the parent mounts.\n- If an unmounted Component had a `<ViewTransition>` within it outside\nthe first DOM node, and it was within the viewport, then that\nViewTransition activates as an \"exit\" animation. This avoids inner\n\"exit\" animations triggering when the parent unmounts.\n- If an explicitly named `<ViewTransition name=\"...\">` is deep within an\nunmounted tree and one with the same name appears in a mounted tree at\nthe same time, then both are activated as a pair, but only if they're\nboth in the viewport. This avoids these triggering \"enter\" or \"exit\"\nanimations when going between parents that don't have a pair.\n- If an already mounted `<ViewTransition>` is visible and a DOM\nmutation, that might affect how it's painted, happens within its\nchildren but outside any nested `<ViewTransition>`. This allows it to\n\"cross-fade\" between its updates.\n- If an already mounted `<ViewTransition>` resizes or moves as the\nresult of direct DOM nodes siblings changing or moving around. This\nallows insertion, deletion and reorders into a list to animate all\nchildren. It is only within one DOM node though, to avoid unrelated\nchanges in the parent to trigger this. If an item is outside the\nviewport before and after, then it's skipped to avoid things flying\nacross the screen.\n- If a `<ViewTransition>` boundary changes size, due to a DOM mutation\nwithin it, then the parent activates (or the root document if there are\nno more parents). This ensures that the container can cross-fade to\navoid abrupt relayout. This can be avoided by using absolutely\npositioned children. When this can avoid bubbling to the root document,\nwhatever is not animating is still responsive to clicks during the\ntransition.\n\nConceptually each DOM node has its own default that activates the parent\n`<ViewTransition>` or no transition if the parent is the root. That\nmeans that if you add a DOM node like `<div><ViewTransition><Component\n/></ViewTransition></div>` this won't trigger an \"enter\" animation since\nit was the div that was added, not the ViewTransition. Instead, it might\ncause a cross-fade of the parent ViewTransition or no transition if it\nhad no parent. This ensures that only explicit boundaries perform coarse\nanimations instead of every single node which is really the benefit of\nthe View Transitions model. This ends up working out well for simple\ncases like switching between two pages immediately while transitioning\none floating item that appears on both pages. Because only the floating\nitem transitions by default.\n\nNote that it's possible to add manual `view-transition-name` with CSS or\n`style={{ viewTransitionName: 'auto' }}` that always transitions as long\nas something else has a `<ViewTransition>` that activates. For example a\n`<ViewTransition>` can wrap a whole page for a cross-fade but inside of\nit an explicit name can be added to something to ensure it animates as a\nmove when something relates else changes its layout. Instead of just\ncross-fading it along with the Page which would be the default.\n\nThere's more PRs coming with some optimizations, fixes and expanded\nAPIs. This first PR explores the above core heuristic.\n\n---------\n\nCo-authored-by: Sebastian \"Sebbie\" Silbermann <silbermann.sebastian@gmail.com>",
        "diff": [
          {
            "removed": "if (!nextProps.hasOwnProperty(propKey))",
            "added": "if (!nextProps.hasOwnProperty(propKey)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-extensions/src/contentScripts/installHook.js",
    "commits": [
      {
        "commit": "6dbccb92493c3a4fea14b6832ceb4ac42e6330c1",
        "message": "[DevTools] upgrade to Manifest V3 (#25145)\n\n## Summary\r\n\r\nresolves #24522\r\n\r\nTo upgrade to Manifest V3, one of the biggest issue is that we are no\r\nlonger allowed to add a script element with code in textContent so that\r\nit would run synchronously. It's necessary for us because we need to\r\ninject a global hook for react reconciler to detect whether devtools\r\nexist.\r\nTo do that, we'll leverage a new API\r\n`chrome.scripting.registerContentScripts` in V3. Particularly, we rely\r\non the \"world\" option (added in Chrome v102\r\n[commit](https://chromium.googlesource.com/chromium/src/+/e5ad3451c17b21341b0b9019b074801c44c92c9f))\r\nto run it in the \"main world\" on the page.\r\n\r\nThis PR also renames a few content script files so that it's easier to\r\ntell them apart from other extension scripts and understand the purpose\r\nof each of them.\r\n\r\nManifest V3 is not yet ready for Firefox, so we need to keep some code\r\nfor compatibility.\r\n\r\n## How did you test this change?\r\n\r\n`yarn build:chrome && yarn test:chrome`\r\n`yarn build:edge && yarn test:edge`\r\n`yarn build:firefox && yarn test:firefox`",
        "diff": [
          {
            "removed": "",
            "added": "if (!window.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react/src/ReactBaseClasses.js",
    "commits": [
      {
        "commit": "e779c39dfeb41ae8f6611dc4f9830d1b1ac64f9b",
        "message": "Flatten everything (#11304)\n\n* Flatten everything\r\n\r\n* Fix ReactDOMServerNode build\r\n\r\n* Fix native builds",
        "diff": [
          {
            "removed": "",
            "added": "    if (deprecatedAPIs.hasOwnProperty(fnName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-reconciler/src/ReactFiberHooks.js",
    "commits": [
      {
        "commit": "8f45a7fdc469c6d88ca5ca105095b03dd4e862e1",
        "message": "Warn about incorrect use of useImperativeHandle() (#14647)",
        "diff": [
          {
            "removed": "",
            "added": "refObject.hasOwnProperty('current'),"
          }
        ]
      },
      {
        "commit": "cb1ff430e8c473a8a6bddd592106891251bbf5bf",
        "message": "Phased dispatcher (#14701)\n\n* Move DEV-only function right above where it's used\r\n\r\nI don't like looking at this top-level function #petty\r\n\r\n* Use different dispatchers for functions & classes\r\n\r\nClasses support readContext, but not any of the other dispatcher\r\nmethods. Function support all methods.\r\n\r\nThis is a more robust version of our previous strategy of checking\r\nwhether `currentlyRenderingFiber` is null.\r\n\r\nAs a next step, we can use a separate dispatcher for each phase of the\r\nrender cycle (mount versus update).\r\n\r\n* Use separate dispatchers for mount and update\r\n\r\n* Remove mount code from update path\r\n\r\nDeletes mount-specific code from the update path, since it should be\r\nunreachable. To continue supporting progressive enhancement (mounting\r\nnew hooks at the end of the list), we detect when there are no more\r\ncurrent hooks and switch back to the mount dispatcher. Progressive\r\nenhancement isn't officially supported yet, so it will continue to warn.\r\n\r\n* Factoring nits\r\n\r\n* Fix Flow\r\n\r\nHad to cheat more than I would like\r\n\r\n* More Flow nits\r\n\r\n* Switch back to using a special dispatcher for nested hooks in DEV\r\n\r\nIn order for this strategy to work, I had to revert progressive\r\nenhancement support (appending hooks to the end). It was previously a\r\nwarning but now it results in an error. We'll reconsider later.\r\n\r\n* Always pass args to updateState and updateReducer\r\n\r\nEven though the extra args are only used on mount, to ensure\r\ntype consistency.",
        "diff": [
          {
            "removed": "",
            "added": "refObject.hasOwnProperty('current'),"
          },
          {
            "removed": "refObject.hasOwnProperty('current'),",
            "added": ""
          }
        ]
      },
      {
        "commit": "9ac42dd074c42b66ecc0334b75200b1d2989f892",
        "message": "Remove the condition argument from warning() (#17568)\n\n* prep for codemod\r\n\r\n* prep warnings\r\n\r\n* rename lint rules\r\n\r\n* codemod for ifs\r\n\r\n* shim www functions\r\n\r\n* Handle more cases in the transform\r\n\r\n* Thanks De Morgan\r\n\r\n* Run the codemod\r\n\r\n* Delete the transform\r\n\r\n* Fix up confusing conditions manually\r\n\r\n* Fix up www shims to match expected API\r\n\r\n* Also check for low-pri warning in the lint rule",
        "diff": [
          {
            "removed": "refObject.hasOwnProperty('current'),",
            "added": ""
          },
          {
            "removed": ");",
            "added": "if (!refObject.hasOwnProperty('current')) {"
          }
        ]
      },
      {
        "commit": "d686f3f16a796025ce32cfb431b70eef6de1934e",
        "message": "Add `.old` prefix to reconciler modules",
        "diff": [
          {
            "removed": "if (!refObject.hasOwnProperty('current')) {",
            "added": ""
          }
        ]
      },
      {
        "commit": "f101c2d0d3a6cb5a788a3d91faef48462e45f515",
        "message": "Remove Reconciler fork (2/2) (#25775)\n\nWe've heard from multiple contributors that the Reconciler forking\r\nmechanism was confusing and/or annoying to deal with. Since it's\r\ncurrently unused and there's no immediate plans to start using it again,\r\nthis removes the forking.\r\n\r\nFully removing the fork is split into 2 steps to preserve file history:\r\n\r\n**#25774 previous PR that did the bulk of the work:**\r\n- remove `enableNewReconciler` feature flag.\r\n- remove `unstable_isNewReconciler` export\r\n- remove eslint rules for cross fork imports\r\n- remove `*.new.js` files and update imports\r\n- merge non-suffixed files into `*.old` files where both exist\r\n(sometimes types were defined there)\r\n\r\n**This PR**\r\n- rename `*.old` files",
        "diff": [
          {
            "removed": "",
            "added": "if (!refObject.hasOwnProperty('current')) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-reconciler/src/ReactFiberHydrationDiffs.js",
    "commits": [
      {
        "commit": "2ec2aaea98588178525f83495669e11e96815a00",
        "message": "Add Diffs to Hydration Warnings (#28512)\n\nStacked on #28502.\r\n\r\nThis builds on the mechanism in #28502 by adding a diff of everything\r\nwe've collected so far to the thrown error or logged error.\r\n\r\nThis isn't actually a longest common subsequence diff. This means that\r\nthere are certain cases that can appear confusing such as a node being\r\nadded/removed when it really would've appeared later in the list. In\r\nfact once a node mismatches, we abort rendering so we don't have the\r\ncontext of what would've been rendered. It's not quite right to use the\r\nresult of the recovery render because it can use client-only code paths\r\nusing useSyncExternalStore which would yield false differences. That's\r\nwhy diffing the HTML isn't quite right.\r\n\r\nI also present abstract components in the stack, these are presented\r\nwith the client props and no diff since we don't have the props that\r\nwere on the server. The lack of difference might be confusing but it's\r\nuseful for context.\r\n\r\nThe main thing that's data new here is that we're adding some siblings\r\nand props for context.\r\n\r\nExamples in the [snapshot\r\ncommit](https://github.com/facebook/react/pull/28512/commits/e14532fd8df858a319d3eca687d83227209a498c).",
        "diff": [
          {
            "removed": "",
            "added": "if (!value.hasOwnProperty(propName)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propName)) {"
          },
          {
            "removed": "",
            "added": "if (!props.hasOwnProperty(propName)) {"
          },
          {
            "removed": "",
            "added": "if (!clientObject.hasOwnProperty(propName)) {"
          },
          {
            "removed": "",
            "added": "if (serverObject.hasOwnProperty(propName)) {"
          },
          {
            "removed": "",
            "added": "if (!remainingServerProperties.hasOwnProperty(propName)) {"
          },
          {
            "removed": "",
            "added": "if (!serverProps.hasOwnProperty(propName)) {"
          },
          {
            "removed": "",
            "added": "if (!clientProps.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-reconciler/src/ReactFiberCommitEffects.js",
    "commits": [
      {
        "commit": "fe03c56d1e51379a18676b04cf185e76f04cd457",
        "message": "[Fiber] Extract Functions that Call User Space and Host Configs in Commit to Separate Modules (#30881)\n\nThis is mostly just moves and same code extracted into utility\r\nfunctions.\r\n\r\nThis is to help clarify what needs to be wrapped in try/catch and\r\nrunWithFiberInDEV. I'll do the runWithFiberInDEV changes in a follow up.\r\n\r\nThis leaves ReactCommitWork mostly to do matching on the tag and the\r\nrecursive loops.",
        "diff": [
          {
            "removed": "",
            "added": "        } else if (!ref.hasOwnProperty('current')) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hook.js",
    "commits": [
      {
        "commit": "ec7ef50e8b7a61639d5b622e9e675602120e2e96",
        "message": "Reorganized things again into packages",
        "diff": [
          {
            "removed": "",
            "added": "  if (target.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) return null;"
          }
        ]
      },
      {
        "commit": "ac2e861fbe05901b874e3ab49807abab820ef648",
        "message": "Fixed a bunch of Lint issues",
        "diff": [
          {
            "removed": "if (target.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) return null;",
            "added": "if (target.hasOwnProperty('__REACT_DEVTOOLS_GLOBAL_HOOK__')) {"
          }
        ]
      },
      {
        "commit": "dd5365878da2fe88a34dcdbb07d8297a78841da4",
        "message": "[DevTools] remove backend dependency from the global hook (#26563)\n\n## Summary\r\n\r\n- #26234 is reverted and replaced with a better approach \r\n- introduce a new global devtools variable to decouple the global hook's\r\ndependency on backend/console.js, and add it to react-devtools-inline\r\nand react-devtools-standalone\r\n\r\nWith this PR, I want to introduce a new principle to hook.js: we should\r\nalways be alert when editing this file and avoid importing from other\r\nfiles.\r\nIn the past, we try to inline a lot of the implementation because we use\r\n`.toString()` to inject this function from the extension (we still have\r\nsome old comments left). Although it is no longer inlined that way, it\r\nhas became now more important to keep it clean as it is a de facto\r\nglobal API people are using (9.9K files contains it on Github search as\r\nof today).\r\n\r\n\r\n**File size change for extension:**\r\nBefore:\r\n379K installHook.js\r\n\r\nAfter:\r\n 21K installHook.js\r\n363K renderer.js",
        "diff": [
          {
            "removed": "",
            "added": "if (target.hasOwnProperty('__REACT_DEVTOOLS_CONSOLE_FUNCTIONS__')) {"
          }
        ]
      },
      {
        "commit": "0dbacf204168cedaf1b430084b5fc3820f1c6dfa",
        "message": "[DevTools] Improve Layering Between Console and Renderer (#30925)\n\nThe console instrumentation should not know about things like Fibers.\r\nOnly the renderer bindings should know about that stuff. We can improve\r\nthe layering by just moving all that stuff behind a `getComponentStack`\r\nhelper that gets injected by the renderer.\r\n\r\nThis sets us up for the Flight renderer #30906 to have its own\r\nimplementation of this function.",
        "diff": [
          {
            "removed": "if (target.hasOwnProperty('__REACT_DEVTOOLS_CONSOLE_FUNCTIONS__')) {",
            "added": ""
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hydration.js",
    "commits": [
      {
        "commit": "ec7ef50e8b7a61639d5b622e9e675602120e2e96",
        "message": "Reorganized things again into packages",
        "diff": [
          {
            "removed": "",
            "added": "    if (!parent || !parent.hasOwnProperty(last)) {"
          }
        ]
      },
      {
        "commit": "4da836af71f035a25c26814e7f6aa04e0535f4af",
        "message": "Merged changes from 4.0.0 -> 4.0.5 from DevTools fork",
        "diff": [
          {
            "removed": "",
            "added": "if (!parent || !parent.hasOwnProperty(last)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/backend/fiber/renderer.js",
    "commits": [
      {
        "commit": "ec98d36c3a47e9f02c45cc14ff6046fff8c27458",
        "message": "[DevTools] Rename Fiber to Element in the Bridge Protocol and RendererInterface (#30490)\n\nI need to start clarifying where things are really actually Fibers and\r\nwhere they're not since I'm adding Server Components as a separate type\r\nof component instance which is not backed by a Fiber.\r\n\r\nNothing in the front end should really know anything about what kind of\r\nrenderer implementation we're inspecting and indeed it's already not\r\nalways a \"Fiber\" in the legacy renderer.\r\n\r\nWe typically refer to this as a \"Component Instance\" but the front end\r\ncurrently refers to it as an Element as it historically grew from the\r\nbrowser DevTools Elements tab.\r\n\r\nI also moved the renderer.js implementation into the `backend/fiber`\r\nfolder. These are at the same level as `backend/legacy`. This clarifies\r\nthat anything outside of this folder ideally shouldn't refer to a\r\n\"Fiber\".\r\n\r\nconsole.js and profilingHooks.js unfortunately use Fibers a lot which\r\nneeds further refactoring. The profiler frontend also uses the term\r\nalot.",
        "diff": [
          {
            "removed": "",
            "added": "      next.hasOwnProperty('baseState') &&"
          },
          {
            "removed": "",
            "added": "      next.hasOwnProperty('memoizedState') &&"
          },
          {
            "removed": "",
            "added": "      next.hasOwnProperty('next') &&"
          },
          {
            "removed": "",
            "added": "      next.hasOwnProperty('queue')"
          },
          {
            "removed": "",
            "added": "      next.hasOwnProperty('baseState') &&"
          },
          {
            "removed": "",
            "added": "      next.hasOwnProperty('memoizedState') &&"
          },
          {
            "removed": "",
            "added": "      next.hasOwnProperty('next') &&"
          },
          {
            "removed": "",
            "added": "      next.hasOwnProperty('queue')"
          },
          {
            "removed": "",
            "added": "    const hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner');"
          },
          {
            "removed": "",
            "added": "    const isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');"
          },
          {
            "removed": "",
            "added": "      const isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');"
          },
          {
            "removed": "",
            "added": "      const isProfilingSupported = nextFiber.hasOwnProperty('treeBaseDuration');"
          },
          {
            "removed": "",
            "added": "      root.current.hasOwnProperty('treeBaseDuration')"
          },
          {
            "removed": "",
            "added": "      if (memoizedProps != null && memoizedProps.hasOwnProperty('xstyle')) {"
          }
        ]
      },
      {
        "commit": "587f03c922cc10f14e66e85d6ea7e4c647ac4bef",
        "message": "[DevTools] Build up DevTools Instance Shadow Tree (#30625)\n\nThis is the beginning of a refactor of the DevTools Fiber backend. The\r\nnew approach is basically that we listen to each commit from Fiber and\r\ntraverse the tree - building up a filtered shadow tree. Then we send\r\ndiffs based on that tree and perform our own operations against that\r\ninstead of using Fibers as the source of truth.\r\n\r\nFiber diffs Elements -> Fibers. The backend diffs Fibers ->\r\nDevToolsInstances as a side-effect it sends deltas to the front end.\r\n\r\nThis makes the algorithm resilient to a different Fiber implementation\r\nthat doesn't use pairs of Fibers (alternates) but instead stateless new\r\nclones each time. In that world we can't treat Fibers as instances. They\r\ncan hold onto instances but they're not necessarily 1:1 themselves.\r\n\r\nThe same thing also applies to Server Components that don't have their\r\nown instances.\r\n\r\nThe algorithm is more or less the same as React's reconciliation in\r\nReactChildFiber itself. However, we do a mutable update of the tree as\r\nwe go. We also cheat a bit here in the first version in that we still\r\nhave fiberToFiberInstance map and alternate which makes reorders easier.\r\nFurther down we could do the reorders by adding the previous set to a\r\ntemporary map like ChildFiber does but only if they're not already in\r\norder.\r\n\r\nThis first bit is just about making sure that we produce correct trees.\r\nWe have fairly good test coverage already of that already.\r\n\r\nIn the next few follow ups I'll start simplifying the rest of the logic\r\nby taking advantage of the new tree.",
        "diff": [
          {
            "removed": "const isProfilingSupported = nextFiber.hasOwnProperty('treeBaseDuration');",
            "added": ""
          },
          {
            "removed": "",
            "added": "nextFiber.hasOwnProperty('treeBaseDuration');"
          }
        ]
      },
      {
        "commit": "25c584f5672d90ba67d72ea9ba9cc06b12311806",
        "message": "[DevTools] Further Refactoring of Unmounts (#30658)\n\nStacked on #30625 and #30657.\r\n\r\nThis ensures that we only create instances during the commit\r\nreconciliation and that we don't create unnecessary instances for things\r\nthat are filtered or not mounted. This ensures that we also can rely on\r\nthe reconciliation to do all the clean up. Now everything is created and\r\ndeleted as a pair in the same pass.\r\n\r\nPreviously we were including unfiltered components in the owner stack\r\nwhich probably doesn't make sense since you're intending to filter them\r\neverywhere presumably. However, it also means that those links were\r\nbroken since you can't link into owners that don't exist in the parent\r\ntree.\r\n\r\nThe main complication is the component filters. It relied on not\r\nunmounting the old instances. I had to update some tests that asserted\r\non ids that are now shifted.\r\n\r\nFor warnings/errors tracking I now restore them back into the pending\r\nset when they unmount. Basically it puts them back into their\r\n\"pre-commit\" state. That way when they remount they’re still there.\r\n\r\nFor restoring the current selection I use the tracked path mechanism\r\ninstead of relying on the id being unchanged. This is better anyway\r\nbecause if you filter out the currently selected item it's better to\r\nselect the nearest match instead of just losing the selection.",
        "diff": [
          {
            "removed": "const isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');",
            "added": ""
          },
          {
            "removed": "}",
            "added": "const isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');"
          }
        ]
      },
      {
        "commit": "49496d493797d4df1b9496f64a6103d9a7d23968",
        "message": "[DevTools] Support Server Components in Tree (#30684)\n\nThis adds VirtualInstances to the tree. Each Fiber has a list of its\r\nparent Server Components in `_debugInfo`. The algorithm is that when we\r\nenter a set of fibers, we actually traverse level 0 of all the\r\n`_debugInfo` in each fiber. Then level 1 of each `_debugInfo` and so on.\r\nIt would be simpler if `_debugInfo` only contained Server Component\r\nsince then we could just look at the index in the array but it actually\r\ncontains other data as well which leads to multiple passes but we don't\r\nexpect it to have a lot of levels before hitting a reified fiber.\r\nFinally when we hit the end a traverse the fiber itself.\r\n\r\nThis lets us match consecutive `ReactComponentInfo` that are all the\r\nsame at the same level. This creates a single VirtualInstance for each\r\nsequence. This lets the same Server Component instance that's a parent\r\nto multiple children appear as a single Instance instead of one per\r\nFiber.\r\n\r\nSince a Server Component's result can be rendered in more than one place\r\nthere's not a 1:1 mapping though. If it is in different parents or if\r\nthe sequence is interrupted, then it gets split into two different\r\ninstances with the same `ReactComponentInfo` data.\r\n\r\nThe real interesting case is what happens during updates because this\r\nalgorithm means that a Fiber can become reparented during an update to\r\nend up in a different VirtualInstance. The ideal would maybe be that the\r\nfrontend could deal with this reparenting but instead I basically just\r\nunmount the previous instance (and its children) and mount a new\r\ninstance which leads to some interesting scenarios. This is inline with\r\nthe strategy I was intending to pursue anyway where instances are\r\nreconciled against the previous children of the same parent instead of\r\nthe `fiberToFiberInstance` map - which would let us get rid of that map.\r\nIn that case the model is resilient to Fiber being in more than one\r\nplace at a time.\r\n\r\nHowever this unmount/remount does mean that we can lose selection when\r\nthis happens. We could maybe do something like using the tracked path\r\nlike I did for component filters. Ideally it's a weird edge case though\r\nbecause you'd typically not have it. The main case that it happens now\r\nis for reorders of list of server components. In that case basically all\r\nthe children move between server components while the server components\r\nthemselves stay in place. We should really include the key in server\r\ncomponents so that we can reconcile them using the key to handle\r\nreorders which would solve the common case anyway.\r\n\r\nI convert the name to the `Env(Name)` pattern which allows the\r\nEnvironment Name to be used as a badge.\r\n\r\n<img width=\"1105\" alt=\"Screenshot 2024-08-13 at 9 55 29 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/323c20ba-b655-4ee8-84fa-8233f55d2999\">\r\n\r\n(Screenshot is with #30667. I haven't tried it with the alternative\r\nfix.)\r\n\r\n---------\r\n\r\nCo-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",
        "diff": [
          {
            "removed": "const hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner');",
            "added": ""
          },
          {
            "removed": "",
            "added": "const hasOwnerMetadata = fiber.hasOwnProperty('_debugOwner');"
          }
        ]
      },
      {
        "commit": "1a8f92a8699e79966e65841fcb9110bba4c3df7f",
        "message": "[DevTools] Track Tree Base Duration of Virtual Instances (#30817)\n\nThese don't have their own time since they don't take up any time to\r\nrender but they show up in the tree for context. However they never\r\nrender themselves. Their base tree time is the base time of their\r\nchildren. This way they take up the same space as their combined\r\nchildren in the Profiler tree. (Instead of leaving a blank line which\r\nthey did before this PR.)\r\n\r\nThe frontend doesn't track the difference between a virtual instance and\r\na Fiber that didn't render this update. This might be a bit confusing as\r\nto why it didn't render. I add the word \"client\" to make it a bit\r\nclearer and works for both. We should probably have different verbiage\r\nhere based on it is a Server Component or something else.\r\n\r\n<img width=\"1103\" alt=\"Screenshot 2024-08-26 at 5 00 47 PM\"\r\nsrc=\"https://github.com/user-attachments/assets/87b811d4-7024-466a-845d-542493ed3ca2\">\r\n\r\nI also took the opportunity to remove idToTreeBaseDurationMap and\r\nidToRootMap maps. Cloning the Map isn't really all that super fast\r\nanyway and it means we have to maintain the map continuously as we\r\nrender. Instead, we can track it on the instances and then walk the\r\ninstances to create a snapshot when starting to profile. This isn't as\r\nfast but really fast too and requires less bookkeeping while rendering\r\ninstead which is more sensitive than that one snapshot in the beginning.",
        "diff": [
          {
            "removed": "const isProfilingSupported = fiber.hasOwnProperty('treeBaseDuration');",
            "added": ""
          }
        ]
      },
      {
        "commit": "629239824116436521eaf00ddf02aa3b263de6de",
        "message": "[DevTools] Simplify Context Change Tracking in Profiler (#30896)\n\nWhen Context change tracking was added to support modern Context it\r\nrelied on the \"memoizedValue\" to read the current value. This only works\r\nin React 18+ when it was added to support Lazy Context Propagation.\r\nHowever, the backend stored the old value the same way it used to work\r\nfor legacy Context in a global map. This was unnecessary since we *also*\r\nhave the old value on the previous Fiber.\r\n\r\nThis removes all the costly tracking of previous values for every Fiber\r\nthat uses Contexts slowing down profiling. Instead, we just compare the\r\nContexts from\r\n\r\nThe downside is that this no longer supports detecting changes due to\r\nlegacy Context because it doesn't have a similar \"previous\" value.\r\nHowever, legacy Context has long been deprecated and is completely\r\nremoved in 19. So I don't think it's worth supporting since you have to\r\nbe on an old version *and* actually use legacy Context *and* trying to\r\nprofile something that updates it. Which btw, updating legacy contexts\r\nonly worked at all from 16 something when we made updates work. So it\r\nwas unusual even in the slight gap where you could and before you had\r\nmigrated to modern Context introduced in 16.3.",
        "diff": [
          {
            "removed": "next.hasOwnProperty('baseState') &&",
            "added": ""
          },
          {
            "removed": "next.hasOwnProperty('memoizedState') &&",
            "added": ""
          },
          {
            "removed": "next.hasOwnProperty('next') &&",
            "added": ""
          },
          {
            "removed": "next.hasOwnProperty('queue')",
            "added": ""
          },
          {
            "removed": "next.hasOwnProperty('baseState') &&",
            "added": ""
          },
          {
            "removed": "next.hasOwnProperty('memoizedState') &&",
            "added": ""
          },
          {
            "removed": "next.hasOwnProperty('next') &&",
            "added": ""
          },
          {
            "removed": "next.hasOwnProperty('queue')",
            "added": ""
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/devtools/views/Components/InspectedElementHooksTree.js",
    "commits": [
      {
        "commit": "50d9451f320a9aaf94304209193562cc385567d8",
        "message": "Improve DevTools editing interface (#19774)\n\n* Improve DevTools editing interface\r\n\r\nThis commit adds the ability to rename or delete keys in the props/state/hooks/context editor and adds tests to cover this functionality. DevTools will degrade gracefully for older versions of React that do not inject the new reconciler rename* or delete* methods.\r\n\r\nSpecifically, this commit includes the following changes:\r\n* Adds unit tests (for modern and legacy renderers) to cover overriding props, renaming keys, and deleting keys.\r\n* Refactor backend override methods to reduce redundant Bridge/Agent listeners and methods.\r\n* Inject new (DEV-only) methods from reconciler into DevTools to rename and delete paths.\r\n* Refactor 'inspected element' UI components to improve readability.\r\n* Improve auto-size input to better mimic Chrome's Style editor panel. (See this Code Sandbox for a proof of concept.)\r\n\r\nIt also contains the following code cleanup:\r\n* Additional unit tests have been added for modifying values as well as renaming or deleting paths.\r\n* Four new DEV-only methods have been added to the reconciler to be injected into the DevTools hook: overrideHookStateDeletePath, overrideHookStateRenamePath, overridePropsDeletePath, and overridePropsRenamePath. (DevTools will degrade gracefully for older renderers without these methods.)\r\n* I also took this as an opportunity to refactor some of the existing code in a few places:\r\n  * Rather than the backend implementing separate methods for editing props, state, hooks, and context– there are now three methods: deletePath, renamePath, and overrideValueAtPath that accept a type argument to differentiate between props, state, context, or hooks.\r\n  * The various UI components for the DevTools frontend have been refactored to remove some unnecessary repetition.\r\n\r\nThis commit also adds temporary support for override* commands with mismatched backend/frontend versions:\r\n* Add message forwarding for older backend methods (overrideContext, overrideHookState, overrideProps, and overrideState) to the new overrideValueAtPath method. This was done in both the frontend Bridge (for newer frontends passing messages to older embedded backends) and in the backend Agent (for older frontends passing messages to newer backends). We do this because React Native embeds the React DevTools backend, but cannot control which version of the frontend users use.\r\n* Additional unit tests have been added as well to cover the older frontend to newer backend case. Our DevTools test infra does not make it easy to write tests for the other way around.",
        "diff": [
          {
            "removed": "",
            "added": "        hook.hasOwnProperty(meta.type)"
          },
          {
            "removed": "",
            "added": "  if (hook.hasOwnProperty(meta.inspected)) {"
          }
        ]
      },
      {
        "commit": "d14ce51327c1bd4daf78f5118ae23f8620ebad03",
        "message": "refactor[react-devtools]: rewrite context menus (#29049)\n\n## Summary\r\n- While rolling out RDT 5.2.0 on Fusebox, we've discovered that context\r\nmenus don't work well with this environment. The reason for it is the\r\ncontext menu state implementation - in a global context we define a map\r\nof registered context menus, basically what is shown at the moment (see\r\ndeleted Contexts.js file). These maps are not invalidated on each\r\nre-initialization of DevTools frontend, since the bundle\r\n(react-devtools-fusebox module) is not reloaded, and this results into\r\nRDT throwing an error that some context menu was already registered.\r\n- We should not keep such data in a global state, since there is no\r\nguarantee that this will be invalidated with each re-initialization of\r\nDevTools (like with browser extension, for example).\r\n- The new implementation is based on a `ContextMenuContainer` component,\r\nwhich will add all required `contextmenu` event listeners to the\r\nanchor-element. This component will also receive a list of `items` that\r\nwill be displayed in the shown context menu.\r\n- The `ContextMenuContainer` component is also using\r\n`useImperativeHandle` hook to extend the instance of the component, so\r\ncontext menus can be managed imperatively via `ref`:\r\n`contextMenu.current?.hide()`, for example.\r\n- **Changed**: The option for copying value to clipboard is now hidden\r\nfor functions. The reasons for it are:\r\n- It is broken in the current implementation, because we call\r\n`JSON.stringify` on the value, see\r\n`packages/react-devtools-shared/src/backend/utils.js`.\r\n- I don't see any reasonable value in doing this for the user, since `Go\r\nto definition` option is available and you can inspect the real code and\r\nthen copy it.\r\n- We already filter out fields from objects, if their value is a\r\nfunction, because the whole object is passed to `JSON.stringify`.\r\n\r\n## How did you test this change?\r\n### Works with element props and hooks:\r\n- All context menu items work reliably for props items\r\n- All context menu items work reliably or hooks items\r\n\r\n\r\nhttps://github.com/facebook/react/assets/28902667/5e2d58b0-92fa-4624-ad1e-2bbd7f12678f\r\n\r\n### Works with timeline profiler:\r\n- All context menu items work reliably: copying, zooming, ...\r\n- Context menu automatically closes on the scroll event\r\n\r\n\r\nhttps://github.com/facebook/react/assets/28902667/de744cd0-372a-402a-9fa0-743857048d24\r\n\r\n### Works with Fusebox:\r\n- Produces no errors\r\n- Copy to clipboard context menu item works reliably\r\n\r\n\r\nhttps://github.com/facebook/react/assets/28902667/0288f5bf-0d44-435c-8842-6b57bc8a7a24",
        "diff": [
          {
            "removed": "hook.hasOwnProperty(meta.type)",
            "added": ""
          }
        ]
      }
    ]
  },
  {
    "file": "packages/react-devtools-shared/src/hooks/SourceMapMetadataConsumer.js",
    "commits": [
      {
        "commit": "e07039bb61e3d006ad552ab7754acbc91f7b8619",
        "message": "Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260)",
        "diff": [
          {
            "removed": "",
            "added": "      sourcemap.hasOwnProperty(REACT_SOURCES_EXTENSION_KEY) &&"
          },
          {
            "removed": "",
            "added": "      sourcemap.hasOwnProperty(FB_SOURCES_EXTENSION_KEY) &&"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-16/cjs/react-jsx-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-16/cjs/react-jsx-runtime.production.min.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "function q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-16/cjs/react-jsx-dev-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-17/cjs/react-jsx-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-17/cjs/react-jsx-runtime.production.min.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "function q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-17/cjs/react-jsx-dev-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-15/cjs/react-jsx-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-15/cjs/react-jsx-runtime.production.min.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "function q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-15/cjs/react-jsx-dev-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-14/cjs/react-jsx-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-14/cjs/react-jsx-runtime.production.min.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "function q(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=\"\"+k);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q;exports.jsxs=q;"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/legacy-jsx-runtimes/react-14/cjs/react-jsx-dev-runtime.development.js",
    "commits": [
      {
        "commit": "6d50a9d090a2a672fc3dea5ce77a3a05332a6caa",
        "message": "Fixture: Legacy JSX Runtimes (#20012)\n\n* Fixture: Legacy JSX Runtimes\r\n\r\n* Add more comments",
        "diff": [
          {
            "removed": "",
            "added": "      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {"
          }
        ]
      }
    ]
  },
  {
    "file": "fixtures/dom/src/components/fixtures/error-handling/index.js",
    "commits": [
      {
        "commit": "69e2a0d732e1ca74f6dc5df9d0ddd0bf24373965",
        "message": "Ability to access window.event in development (#11687) (#11696)\n\nBefore this change in development window.event was overridden\r\nin invokeGuardedCallback.\r\n\r\nAfter this change window.event is preserved in the browsers that\r\nsupport it.",
        "diff": [
          {
            "removed": "",
            "added": "{window.hasOwnProperty('event') ? ("
          }
        ]
      }
    ]
  }
]